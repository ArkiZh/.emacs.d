# -*- fill-column: 100; -*-
* Abount
:PROPERTIES:
:header-args: :tangle no
:END:
** What's this
[[https://github.com/ArkiZh/.emacs.d][This]] is my emacs config.

I learnt from [[https://github.com/purcell/emacs.d][purcell]] much about how to structure the init files.
** How to use
Add the code below to ~init.el~.
#+begin_src emacs-lisp
  (defun arki/org-babel-load-file (file &optional compile)
    "Similar to `org-babel-load-file', but changes some logic.  Load Emacs
  Lisp source code blocks in the Org FILE.  This function exports the
  source code using `org-babel-tangle' and then loads the resulting file
  using `load-file'.  With optional prefix argument COMPILE, the tangled
  Emacs Lisp file is byte-compiled before it is loaded."
    (interactive "fFile to load: \nP")
    (let* ((tangled-file (concat (file-name-sans-extension file) ".el"))
           (tangled-compiled-file (concat (file-name-sans-extension file) ".elc")))
      (require 'org)
      ;; Tangle only if the Org file is newer than the Elisp file.
      (when (file-newer-than-file-p file tangled-file)
        (org-babel-tangle-file file tangled-file "emacs-lisp")
        (message "Tangled: %s --> %s" file tangled-file))
      (if compile
          (if (file-newer-than-file-p tangled-file tangled-compiled-file)
              (progn
                (byte-compile-file tangled-file 'load)
                (message "Compiled and loaded: %s --> %s" tangled-file tangled-compiled-file))
            (load-file tangled-compiled-file)
            (message "Has been compiled before. Loaded now: %s" tangled-compiled-file))
        (load-file tangled-file)
        (message "Loaded: %s" tangled-file))))

  ;; Set arki/package-install-disabled to t, if don't want to install new packages.
  (defvar arki/package-install-disabled nil "Disable package install if t.")
  ;; Skip all the require-pack
  (defvar arki/package-require-disabled nil "Disable require-pack if t.")

  (arki/org-babel-load-file (expand-file-name "readme.org" user-emacs-directory) t)
#+end_src

* Basic config
:PROPERTIES:
:header-args: :tangle yes :comments link
:END:
** Check emacs version
#+begin_src emacs-lisp
  ;; Check emacs version
  (let ((minver "27.1"))
    (when (version< emacs-version minver)
      (error "Your Emacs is too old -- this config requires v%s or higher" minver)))
  (let ((tested-ver "27.2"))
    (when (version< emacs-version tested-ver)
      (message "This config has been tested under version %s. But yours is %s. Upgrade if possible." tested-ver emacs-version)))
#+end_src

** Load packages, and activate them.
#+begin_src emacs-lisp
  ;; Adjust garbage collection thresholds during startup, and thereafter. In bytes.
  (setq gc-cons-threshold (* 1024 1024 1024))
  (add-hook 'emacs-startup-hook
            (lambda () (setq gc-cons-threshold (* 20 1024 1024))))

  (require 'package)


  (package-initialize)
#+end_src

** Define my custom common functions
*** Basics
#+begin_src emacs-lisp
  
  ;;----------------------------------------------------------------------------
  ;; Define variables and groups
  ;;----------------------------------------------------------------------------

  (defgroup arki/config nil
    "Manager for my own confgs.")


  (defcustom arki/cache-dir (expand-file-name "arki.cache" user-emacs-directory) "Cache for useful files" :group 'arki/config)
  (make-directory arki/cache-dir t)


  (defcustom arki/site-lisp-dir (expand-file-name "site-lisp" user-emacs-directory)
    "Directory for site lisp. If changed, should add the new value to `load-path' manually."
    :group 'arki/config)
  (make-directory arki/site-lisp-dir t)
  (add-to-list 'load-path arki/site-lisp-dir)


  (defcustom arki/package-archives-mirrors '(("official" . (("gnu"   . "https://elpa.gnu.org/packages/")
                                                            ("melpa" . "https://melpa.org/packages/"))))
    "Config elpa mirrors."
    :group 'arki/config
    :type '(alist :key-type string :value-type (alist :key-type string :value-type string)))


  (defvar arki/package-contents-refreshed nil
    "Indicate whether the package contents has been refreshed.

  If nil: invoke `package-refresh-contents' during `require-package', then set to t, no matter whether the refresh is successful.
  If non-nil: don't invoke `package-refresh-contents' during `require-package.")


  (defvar arki/package-installed-info '(("INSTALLED_BEFORE") ("INSTALLED_NOW") ("FAILED"))
    "Record the installation info of required packages.")


  
  ;;----------------------------------------------------------------------------
  ;; Define common functions
  ;;----------------------------------------------------------------------------
  (defun arki/list-replace-nth-value (var n value)
    "Replace the N-th element of list VAR by VALUE."
    (setcar (nthcdr n var) value))

  (defun arki/alist-keys (input_alist)
    "Get keys of an ALIST."
    (mapcar 'car input_alist))

  (defun arki/alist-get-value (input-alist key)
    "Get the value of KEY from an ALIST."
    (cdr (assoc key input-alist)))

  (defun arki/alist-push-value (input_alist key value)
    "Set the given ALIST.
  Operation is done in-place.

  If the key exists: push value to the first position of that key's content.
  If not exists: append the k-v pair to the end of this alist.

  Return: the input_alist."
    (let ((cur_kv (assoc key input_alist)))
      (if cur_kv (setcdr cur_kv (cons value (cdr cur_kv)))
        ;; (message "Unknown key: %s. Now add it with value: %s." key value)
        ;; (setcdr input_alist (copy-alist input_alist))
        ;; (setcar input_alist (list key value))
        (setcdr (last input_alist) (list (cons key value)))
        )
      )
    input_alist)

  (defun arki/directory-parent (file-name n)
    "Get parent directory of `file-name' by `n' times"
    (let ((result (directory-file-name (expand-file-name file-name))))
      (dotimes (i n)
        (setq result (directory-file-name (file-name-directory result))))
      result))


  ;; https://emacs.stackexchange.com/questions/3022/reset-custom-variable-to-default-value-programmatically
  (defun arki/defcustom-reset-value (var)
    "Reset variable defined by defcustom to its standard value."
    (when (custom-variable-p var)
      (let ((std-value (eval (car (get var 'standard-value)))))
        (customize-save-variable var std-value))))

  
  ;;----------------------------------------------------------------------------
  ;; Package utils
  ;;----------------------------------------------------------------------------

  (defun refresh-pack-contents ()
    "Refresh package database. And refresh only once."
    (unless arki/package-contents-refreshed
      (message "Refreshing package database...")
      (condition-case err (
                           progn
                           (message "Refreshing package database...")
                           (package-refresh-contents)
                           (message "Refreshing package database finished!")
                           )
        (error
         (message "Failed to refresh package database! ERROR: %S" err))
        )
      (setq arki/package-contents-refreshed t)
      ))


  (defun require-pack (pack &optional skip-load)
    "Install the given PACKAGE.
  And execute require PACKAGE if newly installed, to avoid requiring it manually.

  If installed successfully, return t, else return nil"
    (unless arki/package-require-disabled
      (if (package-installed-p pack) (progn
                                       (arki/alist-push-value arki/package-installed-info "INSTALLED_BEFORE" pack)
                                       (when (not skip-load)
                                         (require pack))
                                       t)
        ;; Set arki/package-install-disabled to t, if don't want to install new packages.
        (unless (bound-and-true-p arki/package-install-disabled)
          (refresh-pack-contents)
          (message "Package: %s installing..." pack)
          (condition-case err (progn
                                (package-install pack)
                                (arki/alist-push-value arki/package-installed-info "INSTALLED_NOW" pack)
                                (message "Package: %s installed!" pack)
                                (when (not skip-load)
                                  (require pack)
                                  (message "Package: %s loaded!" pack))
                                t)
            (error
             (arki/alist-push-value arki/package-installed-info "FAILED" pack)
             (message "Package: `%S' failed to install! ERROR: %S" pack err)
             nil))))))

  (defun require-packs (pack &rest packs)
    "Insall the given packs.

  If all installed successfully, return t, else return nil"
    (if (not packs)
        (require-pack pack)
      (push pack packs)
      (let ((all-installed t))
        (dolist (cur-pack packs)
          (setq all-installed (and all-installed (require-pack cur-pack))))
        all-installed))
    )


  (defun arki/package-archives-mirror-switch (mirror-name &optional refresh)
    "Set package archives mirror.

  MIRROR-NAME The mirror name defined in `arki/package-archives-mirrors'

  REFRESH If not nil, invoke `package-refresh-contents'"

    (interactive (list (ido-completing-read "Select the mirror: "
                                            (mapcar 'car arki/package-archives-mirrors)
                                            nil t nil)
                       current-prefix-arg))
    (setq package-archives (cdr (assoc mirror-name arki/package-archives-mirrors)))
    (setq arki/package-contents-refreshed nil)
    (message "Set package-archives to %s: %s" mirror-name package-archives)
    (when refresh
      (package-refresh-contents)
      (setq arki/package-contents-refreshed t)
      (message "Package contents refreshed!")))
  
  ;;----------------------------------------------------------------------------
  ;; Key binding utils
  ;;----------------------------------------------------------------------------

  (defvar arki/key-bindings '((global))
    "Record customize key-bindings.")

  (defun arki/define-key (key command &optional keymap)
    "Set key binding, and record the binding to `arki/key-bindings'.

  KEY
  The key string displayed by <C-h k>

  COMMAND
  The command needed to be binded, should be quoted.

  KEYMAP
  If nil, set to `current-global-map'.
  If provided, should be quoted."
    (let* ((current-keymap (if keymap (symbol-value keymap) (current-global-map)))
           (current-kbd (kbd key))
           (current-keymap-symbol (if keymap keymap 'global))
           (previous-command (lookup-key current-keymap current-kbd))
           (previous-need-record (and previous-command
                                      (not (assoc key (cdr (assoc current-keymap-symbol arki/key-bindings))))
                                      )))
      (when previous-need-record
        (arki/alist-push-value arki/key-bindings current-keymap-symbol (list key previous-command)))
      (arki/alist-push-value arki/key-bindings current-keymap-symbol (list key command))
      (define-key current-keymap current-kbd command)))


  (define-prefix-command 'arki/prefix-keymap)
  (arki/define-key "<M-SPC>" 'arki/prefix-keymap)
  
  ;;----------------------------------------------------------------------------
  ;; File utils
  ;;----------------------------------------------------------------------------

  (defun arki/delete-this-file-and-buffer ()
    "Delete the current file, and kill the buffer."
    (interactive)
    (unless (buffer-file-name)
      (error "No file is currently being edited"))
    (when (yes-or-no-p (format "Really delete '%s'?"
                               (file-name-nondirectory buffer-file-name)))
      (delete-file (buffer-file-name))
      (kill-this-buffer)))

  (arki/define-key "k" 'arki/delete-this-file-and-buffer 'arki/prefix-keymap)


  (defun arki/rename-this-file-and-buffer (new-name)
    "Rename both current buffer and file to NEW-NAME."
    (interactive "sNew name: ")
    (let ((name (buffer-name))
          (filename (buffer-file-name)))
      (unless filename
        (error "Buffer '%s' is not visiting a file!" name))
      (progn
        (when (file-exists-p filename)
          (rename-file filename new-name 1))
        (set-visited-file-name new-name)
        (rename-buffer new-name))))

  (arki/define-key "r" 'arki/rename-this-file-and-buffer 'arki/prefix-keymap)


  (defun arki/sudo-open-file()
    "Open file with sudo privilege"
    (interactive)
    (if (memq system-type '(cygwin darwin gnu gnu/linux))
        (let* ((cur-file (buffer-file-name))
               (file-path (ido-read-file-name "Sudo open: " nil (buffer-file-name))))
          (find-file (concat "/sudo::" file-path))
          )
      (message "Can't execute sudo for system: [%s]" system-type)
      )
    )


  
  ;;----------------------------------------------------------------------------
  ;; Buffer utils
  ;;----------------------------------------------------------------------------

  (defun arki/indent-region-or-buffer()
    "Indent the region if selected, otherwise the whole buffer."
    (interactive)
    (save-excursion
      (if (region-active-p)
          (progn
            (indent-region (region-beginning) (region-end))
            (message "Region indented."))
        (progn
          (indent-region (point-min) (point-max))
          (message "Buffer indented.")))))

  (arki/define-key "C-M-\\" 'arki/indent-region-or-buffer)


  (defun arki/copy-or-kill-current-line (arg)
    "If arg equals 4, kill.
  Else copy."
    (interactive "p")
    (save-mark-and-excursion
      (if (= arg 4)
          (progn
            (kill-region (line-beginning-position) (line-end-position))
            (message "Current line killed."))
        (kill-ring-save (line-beginning-position) (line-end-position))
        (message "Current line copied."))))

  (arki/define-key "l" 'arki/copy-or-kill-current-line 'arki/prefix-keymap)


  ;; https://stackoverflow.com/questions/6707758/inverse-of-m-q-an-unfill-paragraph-function
  (defun arki/unfill-paragraph (&optional justify region)
    "Takes a multi-line paragraph and makes it into a single line of text."
    (interactive (progn
                   (barf-if-buffer-read-only)
                   (list (if current-prefix-arg 'full) t)))
    (let ((fill-column (point-max)))
      (fill-paragraph justify region)))

  ;; 将多行的段落合并成一行
  (arki/define-key "M-Q" 'arki/unfill-paragraph)
  
  ;;----------------------------------------------------------------------------
  ;; Graphic frame callbacks
  ;;----------------------------------------------------------------------------
  (defvar arki/graphic-frame-callbacks nil "Store callbacks for graphic environment.")
  (defvar arki/graphic-frame-callbacks-executed-p nil "Flag to judge whether these callbacks have been called.")

  (defun arki/callbacks-call (callbacks)
    "Invoke each of CALLBACKS.

  Each element of CALLBACKS is a list, looks like (callback repeat? invoked-counter)."
    (dolist (vv callbacks)
      (let ((fun (nth 0 vv))
            (repeat (nth 1 vv))
            (cnt (nth 2 vv)))
        (when (or repeat
                  (and (not repeat) (< cnt 1)))
          (funcall fun)
          (arki/list-replace-nth-value vv 2 (+ cnt 1))))))

  (add-hook 'after-init-hook
            (lambda (&rest params) (arki/callbacks-call arki/graphic-frame-callbacks)))

  (add-hook 'after-make-frame-functions
            (lambda (&rest params) (arki/callbacks-call arki/graphic-frame-callbacks)))

  (defun arki/add-hook-for-graphic-frame-init (callback &optional no-repeat)
    "Add CALLBACK to `after-init-hook and `after-make-frame-functions if `display-graphic-p is t.

  NO-REPEAT If t, this CALLBACK can be invoked only once, else any times."
    (when (display-graphic-p)
      (add-to-list 'arki/graphic-frame-callbacks (list callback (not no-repeat) 0))))
#+end_src

*** Site lisp utils
#+begin_src emacs-lisp
  ;;----------------------------------------------------------------------------
  ;; Site lisp utils
  ;;----------------------------------------------------------------------------

  ;; Learnt from purcel's config.
  ;; https://github.com/purcell/emacs.d


  ;; It seems only need to add site-lisp root dir to load-path, so comment this function out.
  ;; But it turns out that I'm wrong. If not append the subdir path to load path,
  ;; the el file in it won't compile successfully.
  ;; Now I add this logic into require-pack-local, only add the subdir which is needed.

  ;; (defun arki/add-subdirs-to-load-path (parent-dir)
  ;;   "Add every non-hidden subdir of PARENT-DIR to `load-path'."
  ;;   (let ((default-directory parent-dir))
  ;;     (dolist (cur-dir (directory-files (expand-file-name user-emacs-directory) t "^[^\\.]"))
  ;;       (when (file-directory-p cur-dir)
  ;;     (setq load-path (append (list cur-dir) load-path))))))


  ;; Utilities for grabbing upstream libs
  (defun arki/site-lisp-dir-for (name)
    (expand-file-name (symbol-name name) arki/site-lisp-dir))


  (defun arki/site-lisp-library-el-path (name)
    "Locate el file path in site lisp directory.

    First search file in `arki/site-lisp-dir', if not found here, give the path in subdir."
    (let* ((el-name (format "%s.el" name))
           (first-file (expand-file-name el-name arki/site-lisp-dir)))
      (if (file-exists-p first-file)
          first-file
        (expand-file-name el-name (arki/site-lisp-dir-for name)))))


  (defun arki/download-site-lisp-el-file (name url)
    "Dowload el file from url.

    Return file path if success, else return nil."
    (let* ((dir (arki/site-lisp-dir-for name))
           (dir-exists (file-directory-p dir)))
      (message "Downloading %s from %s" name url)
      (unless dir-exists (make-directory dir t))
      (let ((el-file (arki/site-lisp-library-el-path name)))
        (condition-case err (progn
                              (url-copy-file url el-file t nil)
                              el-file)
          (error
           (warn "Failed to download %s! ERROR: %S" name err)
           (unless dir-exists (delete-directory dir t))
           nil)))))


  (defun site-lisp-library-loadable-p (name)
    "Return whether or not the library `name' can be loaded from a
    source file under `arki/site-lisp-dir'"
    (file-exists-p (arki/site-lisp-library-el-path name)))


  (defun require-pack-local (name &optional ensure url)
    "Install package from url.

    TODO: Need to add feature:
    1. Need to support the case: url is a git repo.
    2. In the case el file's name is different from its dir: need to specify the target dir, and load specific el file.
    2. The switch to skip compile stage.


    If it's already downloaded before, compile it if necessary, then require it.
    If not found, download it if `ensure' is t, otherwise ignore this package."
    (if (site-lisp-library-loadable-p name)
        (let ((el-file (arki/site-lisp-library-el-path name)))
          ;; Add this file's parent dir to load-path, to avoid compiling error.
          (add-to-list 'load-path (file-name-directory el-file))
          ;; Compile this el file if it hasn't been compiled.
          (if (file-exists-p (byte-compile-dest-file el-file))
              (load (byte-compile-dest-file el-file))
            (message "Compile file: " el-file)
            (byte-compile-file el-file t)))
      (if ensure
          (if url
              (progn (message "Local package not found: %s, download now." name)
                     (if (arki/download-site-lisp-el-file name url)
                         (require-pack-local name)
                       (warn "Require local pack failed for %s" name)
                       nil))
            (warn "Local package not found: %s, and no download url is provided!" name)
            nil)
        (message "Local package is not found: %s, ignore it." name)
        nil)))
#+end_src

** Open alias
#+begin_src emacs-lisp
  ;;----------------------------------------------------------------------------
  ;; Alias utils
  ;;----------------------------------------------------------------------------

  ;; TODO add function: arki/open-alias as an entrance to replace arki/alias-open.
  (defgroup arki/alias nil
    "Alias defined for `arki/open-alias'."
    :group 'arki/config)

  (defcustom arki/alias-files (list (cons "init" (expand-file-name "readme.org" user-emacs-directory)))
    "Config alias."
    :group 'arki/alias
    :type '(alist :key-type string :value-type string))

  (defun arki/alias-file-open()
    "Open alias file.

    If the alias is defined, open it.
    Else, define it now, then open it."
    (interactive)
    (let* ((cur-name (ido-completing-read "Open:" (arki/alist-keys arki/alias-files)))
           (cur-kv (assoc cur-name arki/alias-files)))
      (if cur-kv
          (find-file (arki/alist-get-value arki/alias-files cur-name))
        (let* ((default-file (if buffer-file-name buffer-file-name default-directory))
               (new-file (read-string (format "Assign alias [%s] to: " cur-name) default-file)))
          (push (cons cur-name new-file) arki/alias-files)
          (customize-save-variable 'arki/alias-files arki/alias-files)
          (message "Alias [%s] assigned to: %s" cur-name new-file)
          (unless (equal cur-name new-file)
            (find-file new-file)))
        )))

  (arki/define-key "h" 'arki/alias-file-open 'arki/prefix-keymap)
#+end_src

** Better defaults
*** System settings
#+begin_src emacs-lisp
  ;; 设置utf-8为默认编码格式
  (set-language-environment "UTF-8")

  ;; 取消滚动到底部的报警声
  (setq ring-bell-function 'ignore)

  ;; 保存桌面布局
  (desktop-save-mode -1)

  ;; Comment this keybinding. Use dashboard instead.
  ;; (arki/define-key "o" 'recentf-open-files 'arki/prefix-keymap)

  ;; Bookmarks
  (setq bookmark-default-file (expand-file-name "bookmarks" arki/cache-dir))
  (setq bookmark-save-flag 1)

  ;; Less typing when emacs asks yes or no
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

*** Appearance
#+begin_src emacs-lisp
  ;; Set mouse-color
  (when (equal window-system 'x)
    (if (equal (frame-parameter nil 'background-mode) 'light)
        (set-frame-parameter nil 'mouse-color "black")
      (set-frame-parameter nil 'mouse-color "white")
      ))
  ;; Set cursor type to box or bar
  (setq-default cursor-type 'bar)      ;Doesn't take effect by: (setq cursor-type 'bar)

  ;; 关闭启动画面
  (setq inhibit-splash-screen 1)

  ;; 关闭菜单栏
  (menu-bar-mode -1)
  ;; 关闭工具栏，tool-bar-mode 即为一个 Minor Mode
  (tool-bar-mode -1)

  ;; 显示行号 仅当编程模式时候
  (add-hook 'prog-mode-hook
            (lambda nil
              (if (version<= "26.0.50" emacs-version )
                  (display-line-numbers-mode)
                (linum-mode 1))))

  ;; 在最下面显示光标在行中的位置
  (column-number-mode 1)

  ;; Frame 充满屏幕
  (toggle-frame-maximized)                ; (setq initial-frame-alist (quote ((fullscreen . maximized))))
  ;; 全屏
  ;; (toggle-frame-fullscreen)
#+end_src

*** Hide scroll bar
[[info:elisp#Textual Scrolling][Textual Scrolling]]

#+begin_src emacs-lisp
  ;; 关闭窗口滑动控件
  (scroll-bar-mode -1)
  (horizontal-scroll-bar-mode -1)


  (defgroup arki/navigation nil
    "Font config, only for read."
    :group 'arki/config)


  (defcustom arki/scroll-horizontal-default-width 1
    "The default width (in columns) to scroll horizontally."
    :group 'arki/navigation)


  (defun arki/scroll-horizontal (direction width)
    "Scroll text to right or left horizontally.

  DIRECTION
  If nil or 'right, invoke scroll-left.
  If 'left, invoke scroll-right.

  WIDTH
  If nil or 0, invoke scroll function with arg `arki/scroll-horizontal-default-width'.
  If positive, invoke scroll function with arg WIDTH.
  If negative, invoke scroll function with arg (/ (window-body-width) 2)."
    ;; (message "ARGs: %S %S" direction width)
    (let* ((cur-width (cond ((or (not width) (= width 0)) arki/scroll-horizontal-default-width)
                            ((< width 0) (/ (window-body-width) 2))
                            ((> width 0) width)))
           (scroll-fn (cond ((or (not direction) (eq 'right direction)) 'scroll-left)
                            ((eq 'left direction) 'scroll-right))))
      (when width
        (customize-save-variable 'arki/scroll-horizontal-default-width cur-width)
        (message "Set default scroll width from %s to %s columns." arki/scroll-horizontal-default-width cur-width)
        (setq arki/scroll-horizontal--default-width cur-width))

      ;; https://stackoverflow.com/questions/9942675/in-elisp-how-do-i-put-a-function-in-a-variable
      ;; (message "FUNC: %S WIDTH: %S" scroll-fn width)
      (funcall scroll-fn cur-width)))

  (arki/define-key "<C-right>" (lambda (width) (interactive "P") (arki/scroll-horizontal 'right width)))
  (arki/define-key "<C-left>" (lambda (width) (interactive "P") (arki/scroll-horizontal 'left width)))


  (defcustom arki/scroll-vertical-default-height 1
    "The default height (in columns) to scroll vertically."
    :group 'arki/navigation)

  (defun arki/scroll-vertical (direction heigth)
    "Scroll text to up or down vertically.

  DIRECTION
  If nil or 'down, invoke scroll-up.
  If 'up, invoke scroll-up.

  HEIGHT
  If nil or 0, invoke scroll function with arg `arki/scroll-vertical-default-height'.
  If positive, invoke scroll function with arg HEIGHT.
  If negative, invoke scroll function with arg (/ (window-body-height) 2)."
    ;; (message "ARGs: %S %S" direction height)
    (let* ((cur-height (cond ((or (not height) (= height 0)) arki/scroll-vertical-default-height)
                             ((< height 0) (/ (window-body-height) 2))
                             ((> height 0) height)))
           (scroll-fn (cond ((or (not direction) (eq 'down direction)) 'scroll-up)
                            ((eq 'up direction) 'scroll-down))))
      (when height
        (customize-save-variable 'arki/scroll-vertical-default-height cur-height)
        (message "Set default scroll height from %s to %s rows." arki/scroll-vertical-default-height cur-height)
        (setq arki/scroll-vertical--default-height cur-height))

      ;; https://stackoverflow.com/questions/9942675/in-elisp-how-do-i-put-a-function-in-a-variable
      ;; (message "FUNC: %S HEIGHT: %S" scroll-fn height)
      (funcall scroll-fn cur-height)))

  (arki/define-key "<C-up>" (lambda (height) (interactive "P") (arki/scroll-vertical 'up height)))
  (arki/define-key "<C-down>" (lambda (height) (interactive "P") (arki/scroll-vertical 'down height)))
#+end_src

*** Windown resize                                                   :MODIFY:
[[info:emacs#Change Window][Deleting and reiszing windows]]
#+begin_src emacs-lisp
  (arki/define-key "<M-right>" 'enlarge-window-horizontally)
  (arki/define-key "<M-left>" 'shrink-window-horizontally)

  (arki/define-key "<M-up>" 'enlarge-window)
  (arki/define-key "<M-down>" 'shrink-window)
#+end_src

*** Edit behaviour
#+begin_src emacs-lisp
  ;; 自动加载修改过的文件
  (global-auto-revert-mode t)

  ;; 记录最近打开过的文件
  ;; (require 'recentf)
  (recentf-mode 1)
  (setq recentf-max-menu-item 300)

  ;; 禁止 Emacs 自动生成备份文件
  (setq make-backup-files nil)
  ;; 禁止默认的自动保存
  (setq auto-save-default nil)

  ;; 选中一段文字之后输入一个字符会替换掉你选中部分的文字
  (delete-selection-mode 1)

  ;; 缩进不使用TAB https://www.emacswiki.org/emacs/NoTabs
  ;; Indentation can insert tabs if this is non-nil. Default is t.
  (setq-default indent-tabs-mode nil)
  ;; Distance between tab stops (for display of tab characters), in columns. Default is 8.
  (setq-default tab-width 4)

  ;; Enable function
  (put 'upcase-region 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
  (put 'narrow-to-page 'disabled nil)

  ;; Enable truncate lines
  (setq-default truncate-lines t)

  ;; Deal with very long columns
  ;; https://www.emacswiki.org/emacs/SoLong
  ;; (so-long-commentary)
  (when (version<= "27.1" emacs-version)
    (global-so-long-mode 1)
    (customize-set-variable 'so-long-max-lines 100)
    (customize-set-variable 'so-long-threshold 500))
#+end_src

*** Dired
#+begin_src emacs-lisp :tangle yes
  (with-eval-after-load 'dired
    ;; Dired config
    (setq dired-recursive-deletes 'always)    ;Always delete recursively
    (setq dired-recursive-copies 'always)    ;Always copy recursively

    ;; https://emacs.stackexchange.com/questions/33548/how-show-size-in-kb-in-dired-mode
    (setq dired-listing-switches "-alh")

    ;; https://emacs.stackexchange.com/questions/36317/dired-first-show-list-of-folders
    ;; 加这个选项在wsl2 中没有反应：--group-directories-first
    ;; 在windows 环境可以用这个： (setq ls-lisp-dirs-first t)

    ;; (require 'dired-x) ;; Enable <C-x C-j> to open current file's directory
    (setq dired-dwim-target t)         ;当一个frame中存在多个window时，将下一个分屏自动设置成拷贝地址的目标


    ;; Navigation
    (customize-set-variable 'dired-bind-info nil) ; Non-nil means bind ‘dired-info’ to "I" in Dired, otherwise do not.
    (arki/define-key "I" 'dired-kill-subdir 'dired-mode-map)

    (arki/define-key "<tab>" 'dired-hide-subdir 'dired-mode-map)
    ;; https://emacs.stackexchange.com/questions/53461/specifying-a-binding-for-control-shift-tab
    (arki/define-key "<S-iso-lefttab>" 'dired-hide-all 'dired-mode-map)
    (arki/define-key "<S-tab>" 'dired-hide-all 'dired-mode-map)

    (arki/define-key "P" 'dired-prev-dirline 'dired-mode-map)
    (arki/define-key "N" 'dired-next-dirline 'dired-mode-map)

    (arki/define-key "," 'dired-prev-subdir 'dired-mode-map)
    (arki/define-key "." 'dired-next-subdir 'dired-mode-map)


    ;; Reuse dired buffers. https://www.emacswiki.org/emacs/DiredReuseDirectoryBuffer
    (put 'dired-find-alternate-file 'disabled nil)
    (arki/define-key "RET" 'dired-find-alternate-file 'dired-mode-map)
    (customize-set-variable 'dired-bind-man nil) ; Non-nil means bind ‘dired-man’ to "N" in Dired, otherwise do not.
    (arki/define-key ";"
                     (lambda () (interactive) (find-alternate-file ".."))
                     'dired-mode-map)
    )
#+end_src

*** ibuffer
#+begin_src emacs-lisp
  (setq-default ibuffer-show-empty-filter-groups nil)

  (with-eval-after-load 'ibuffer
    ;; Use human readable Size column instead of original one
    (define-ibuffer-column size-h
      (:name "Size" :inline t)
      (file-size-human-readable (buffer-size))))

  ;; Modify the default ibuffer-formats (toggle with `)
  ;; mark modified read-only locked name size mode process filename
  (setq ibuffer-formats
        '((mark "(" modified "|" read-only locked ") "
                (size-h 10 -1 :right)
                "   "
                (name 36 36 :left :elide)
                "   "
                (mode 36 36 :left :elide)
                "   " filename-and-process)
          (mark "(" modified "|" read-only locked ") "
                (size-h 10 -1 :right)
                "   "
                (name 36 -1 :left)
                "   "
                (mode 36 -1 :left)
                "   " filename-and-process)))

  (setq ibuffer-filter-group-name-face 'font-lock-doc-face)

  (arki/define-key "C-x C-b" 'ibuffer)
#+end_src

** Fonts
#+begin_src emacs-lisp
  ;; 设置默认字体为汉字字符集 找到字符类型的方式： M+x describe-font RET RET
  ;; (set-frame-font "-ADBO-Source Han Serif CN-normal-normal-normal-*-17-*-*-*-*-0-iso10646-1")
  ;; (set-frame-font "Source Han Serif CN")

  ;; 更改显示字体大小 16pt
  ;; http://stackoverflow.com/questions/294664/how-to-set-the-font-size-in-emacs
  ;; (set-face-attribute 'default nil :height 125)

  ;; 借鉴自：
  ;; https://gist.github.com/Superbil/7113937
  ;; base on https://gist.github.com/coldnew/7398835

  (defgroup arki/font nil
    "Font config, only for read."
    :group 'arki/config)


  (defcustom arki/font-english nil
    "English font"
    :group 'arki/font)

  (defcustom arki/font-english-size 16
    "English font size"
    :group 'arki/font)

  (defcustom arki/font-chinese nil
    "Chinese font"
    :group 'arki/font)

  (defcustom arki/font-chinese-size 16
    "Chinese font size"
    :group 'arki/font)

  (defcustom arki/font-chinese-extra nil
    "Chinese extra font"
    :group 'arki/font)

  (defcustom arki/font-chinese-extra-size 16
    "Chinese extra font size"
    :group 'arki/font)

  (defcustom arki/font-symbol nil
    "Symbol font"
    :group 'arki/font)

  (defcustom arki/font-symbol-size 16
    "Symbol font size"
    :group 'arki/font)

  (defcustom arki/font-size-min 5
    "Min font size"
    :group 'arki/font)

  (defcustom arki/font-size-max 50
    "Max font size"
    :group 'arki/font)

  (defcustom arki/font-size-step 1
    "Step size for font adjust"
    :group 'arki/font)



  (defun font-exist-p (fontname)
    "test if this font is exist or not."
    (if (or (not fontname) (string= fontname ""))
        nil
      (if (not (x-list-fonts fontname))
          nil t)))


  (defun arki/set-font-english (font-name font-size)
    "Set English font"
    (when font-name
      (if (not (font-exist-p font-name))
          (warn "Font for English doesn't exist, please install it: %s" font-name)
        (if (or (< font-size arki/font-size-min) (> font-size arki/font-size-max))
            (message "Font size [%S] is not in the range of: [%S, %S]" font-size arki/font-size-min arki/font-size-max)
          ;; (set-face-attribute 'default nil :font (font-spec :family font-name :size font-size))
          (set-frame-font (font-spec :family font-name :size font-size) t nil)
          (setq arki/font-english font-name)
          (setq arki/font-english-size font-size)
          (message "Set English font to: %S Size: %S" font-name font-size)
          ))))


  (defun arki/set-font-chinese (font-name font-size)
    "Set Chinese font"
    (when font-name
      (if (not (font-exist-p font-name))
          (warn "Font for Chinese doesn't exist, please install it: %s" font-name)
        (if (or (< font-size arki/font-size-min) (> font-size arki/font-size-max))
            (message "Font size [%S] is not in the range of: [%S, %S]" font-size arki/font-size-min arki/font-size-max)
          ;; 设置中文字体，注意，不要使用 'unicode charset,否则上面的英文字体设置将会失效。
          (dolist (charset '(kana han cjk-misc bopomofo gb18030))
            (set-fontset-font "fontset-default" charset (font-spec :family font-name :size font-size)))
          (setq arki/font-chinese font-name)
          (setq arki/font-chinese-size font-size)
          (message "Set Chinese font to: %S Size: %S" font-name font-size)
          ))))

  (defun arki/set-font-chinese-extra (font-name font-size)
    "Set Chinese extra font

  设置 fallback 字体，用于显示不常用的字符"
    (when font-name
      (if (not (font-exist-p font-name))
          (warn "Font for Chinese extra doesn't exist, please install it: %s" font-name)
        (if (or (< font-size arki/font-size-min) (> font-size arki/font-size-max))
            (message "Font size [%S] is not in the range of: [%S, %S]" font-size arki/font-size-min arki/font-size-max)
          (set-fontset-font "fontset-default" nil (font-spec :family font-name :size font-size) nil 'prepend)
          (setq arki/font-chinese-extra font-name)
          (setq arki/font-chinese-extra-size font-size)
          (message "Set Chinese extra font to: %S Size: %S" font-name font-size)
          ))))


  (defun arki/set-font-symbol (font-name font-size)
    "Set symbol font"
    (when font-name
      (if (not (font-exist-p font-name))
          (warn "Font for symbol doesn't exist, please install it: %s" font-name)
        (if (or (< font-size arki/font-size-min) (> font-size arki/font-size-max))
            (message "Font size [%S] is not in the range of: [%S, %S]" font-size arki/font-size-min arki/font-size-max)
          (set-fontset-font "fontset-default" 'symbol (font-spec :family font-name :size font-size))
          (setq arki/font-symbol font-name)
          (setq arki/font-symbol-size font-size)
          (message "Set symbol font to: %S Size: %S" font-name font-size)
          ))))


  (defun arki/font-step (step-size font-type)
    "Set font size by step.

  font-type: 1 for English font. 2 Chinese. 3 Chinese-extra. 4 symbol"

    (cond
     ((equal font-type 1) (arki/set-font-english arki/font-english (+ arki/font-english-size step-size)))
     ((equal font-type 2) (arki/set-font-chinese arki/font-chinese (+ arki/font-chinese-size step-size)))
     ((equal font-type 3) (arki/set-font-chinese-extra arki/font-chinese-extra (+ arki/font-chinese-extra-size step-size)))
     ((equal font-type 4) (arki/set-font-symbol arki/font-symbol (+ arki/font-symbol-size step-size)))
     (t (warn "Unsupported font-type: %s" font-type))
     )
    )


  (defun arki/font-family-suggest (&optional font-type)
    "Suggest font families available in minibuffer.

  font-type: 1 for English font. 2 Chinese. 3 Chinese-extra. 4 symbol"
    (interactive)
    (let* ((font-type-name (cond
                            ((equal font-type 1) " for English")
                            ((equal font-type 2) " for Chinese")
                            ((equal font-type 3) " for Chinese extra")
                            ((equal font-type 4) " for symbol")
                            (t "")
                            ))
           (prev-font-name (cond
                            ((equal font-type 1) arki/font-english)
                            ((equal font-type 2) arki/font-chinese)
                            ((equal font-type 3) arki/font-chinese-extra)
                            ((equal font-type 4) arki/font-symbol)
                            (t "")
                            ))
           (font-selected (ido-completing-read
                           (format "Select font%s: " font-type-name)
                           (delete-dups (font-family-list))
                           nil nil prev-font-name
                           )))
      (if (equal font-selected "nil")
          nil
        font-selected)
      )
    )


  (defun arki/font-family-select (font-type)
    "Set font family.

  font-type: 1 for English font. 2 Chinese. 3 Chinese-extra. 4 symbol"
    (if (not (memq font-type '(1 2 3 4)))
        (warn "Unsupported font-type: %s" font-type)
      (let ((suggested-font (arki/font-family-suggest font-type)))
        (cond
         ((equal font-type 1) (arki/set-font-english suggested-font arki/font-english-size))
         ((equal font-type 2) (arki/set-font-chinese suggested-font arki/font-chinese-size))
         ((equal font-type 3) (arki/set-font-chinese-extra suggested-font arki/font-chinese-extra-size))
         ((equal font-type 4) (arki/set-font-symbol suggested-font arki/font-symbol-size))
         )
        )))


  (defun arki/set-font ()
    "Set all the font families and sizes"
    (arki/set-font-english arki/font-english arki/font-english-size)
    (arki/set-font-chinese arki/font-chinese arki/font-chinese-size)
    (arki/set-font-chinese-extra arki/font-chinese-extra arki/font-chinese-extra-size)
    (arki/set-font-symbol arki/font-symbol arki/font-symbol-size)
    )


  (defun arki/save-font ()
    (message "Fonts config saving...")
    (customize-save-variable 'arki/font-english arki/font-english)
    (customize-save-variable 'arki/font-english-size arki/font-english-size)
    (customize-save-variable 'arki/font-chinese arki/font-chinese)
    (customize-save-variable 'arki/font-chinese-size arki/font-chinese-size)
    (customize-save-variable 'arki/font-chinese-extra arki/font-chinese-extra)
    (customize-save-variable 'arki/font-chinese-extra-size arki/font-chinese-extra-size)
    (customize-save-variable 'arki/font-symbol arki/font-symbol)
    (customize-save-variable 'arki/font-symbol-size arki/font-symbol-size)
    (message "Fonts config saved." )
    )

  (defun arki/font-adjust ()
    (interactive)
    (message "
   +---------------------------------------------------------------+
   | 使用方法 | 按根据提示对中英文字体进行加减，使表格线对齐       |
   | 英文字   | 0123456789 abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLM|
   | 扩展字   | 𠄀𠄁𠄂𠄃𠄄𠄅𠄆𠄇𠄈𠄉𠄀𠄁𠄂𠄃𠄄𠄅𠄆𠄇𠄈𠄄𠄅𠄆𠄇𠄇𠄆 |
   +---------------------------------------------------------------+

  Set font: ENG(1 q+ a-) ZH(2 w+ s-) EXT(3 e+ d-) Symbol(4 r+ f-). Save(0)")
    (set-transient-map
     (let ((map (make-sparse-keymap)))
       (define-key map (vector (list ?1))
         (lambda () (interactive) (arki/font-family-select 1) (arki/font-adjust)))
       (define-key map (vector (list ?q))
         (lambda () (interactive) (arki/font-step arki/font-size-step 1) (arki/font-adjust)))
       (define-key map (vector (list ?a))
         (lambda () (interactive) (arki/font-step (- arki/font-size-step) 1) (arki/font-adjust)))

       (define-key map (vector (list ?2))
         (lambda () (interactive) (arki/font-family-select 2) (arki/font-adjust)))
       (define-key map (vector (list ?w))
         (lambda () (interactive) (arki/font-step arki/font-size-step 2) (arki/font-adjust)))
       (define-key map (vector (list ?s))
         (lambda () (interactive) (arki/font-step (- arki/font-size-step) 2) (arki/font-adjust)))

       (define-key map (vector (list ?3))
         (lambda () (interactive) (arki/font-family-select 3) (arki/font-adjust)))
       (define-key map (vector (list ?e))
         (lambda () (interactive) (arki/font-step arki/font-size-step 3) (arki/font-adjust)))
       (define-key map (vector (list ?d))
         (lambda () (interactive) (arki/font-step (- arki/font-size-step) 3) (arki/font-adjust)))

       (define-key map (vector (list ?4))
         (lambda () (interactive) (arki/font-family-select 4) (arki/font-adjust)))
       (define-key map (vector (list ?r))
         (lambda () (interactive) (arki/font-step arki/font-size-step 4) (arki/font-adjust)))
       (define-key map (vector (list ?f))
         (lambda () (interactive) (arki/font-step (- arki/font-size-step) 4) (arki/font-adjust)))

       (define-key map (vector (list ?0))
         (lambda () (interactive) (arki/save-font) (arki/font-adjust)))

       map))
    )


  (defun init-font ()
    (arki/define-key "f" 'arki/font-adjust 'arki/prefix-keymap)
    (message "Setting font...")
    (arki/set-font)
    (message "Setting font done."))

  (arki/add-hook-for-graphic-frame-init 'init-font)

  ;; 有空时候看看这个用于org-mode 表格对齐的：https://github.com/chen-chao/zh-align.el

  ;; (when (require-pack 'cnfonts)
  ;;   ;; 配置cnfonts https://github.com/tumashu/cnfonts
  ;;   ;; 让 cnfonts 随着 Emacs 自动生效。
  ;;   (cnfonts-enable)
  ;;   (setq cnfonts-use-face-font-rescale t)
  ;;   (setq cnfonts-keep-frame-size nil))
#+end_src

** Auto save
#+begin_src emacs-lisp
  ;; 使用新的自动保存
  ;; 参考自：
  ;; https://github.com/bbatsov/super-save/blob/2a905b8bdfc93bee16e2d62a61c6211bbe009331/super-save.el
  ;; https://www.emacswiki.org/emacs/auto-save.el
  (defgroup arki/auto-save nil
    "Smart-saving of buffers."
    :group 'arki/config)

  (defvar arki/auto-save-mode-map (make-sparse-keymap)
    "arki/auto-save mode's keymap.")

  (defcustom arki/auto-save-triggers '(
                                       switch-to-buffer next-buffer previous-buffer
                                       other-window windmove-up windmove-down windmove-left windmove-right
                                       revert-buffer revert-buffer-with-coding-system
                                       ace-window) ; TODO Need to check (fboundp 'ace-window)
    "A list of commands which would trigger `arki/auto-save-command'."
    :group 'arki/auto-save
    :type '(repeat symbol))

  (defcustom arki/auto-save-silent t
    "Save buffer without modify minibuffer message."
    :group 'arki/auto-save
    :type 'boolean)

  (defcustom arki/auto-save-hook-triggers
    '(mouse-leave-buffer-hook focus-out-hook)
    "A list of hooks which would trigger `arki/auto-save-command'."
    :group 'arki/auto-save
    :type '(repeat symbol))

  (defcustom arki/auto-save-auto-save-when-idle t
    "Save current buffer automatically when Emacs is idle."
    :group 'arki/auto-save
    :type 'boolean)

  (defcustom arki/auto-save-idle-duration 5
    "The number of seconds Emacs has to be idle, before auto-saving the current buffer.
  See `arki/auto-save-auto-save-when-idle'."
    :group 'arki/auto-save
    :type 'integer)

  (defcustom arki/auto-save-remote-files nil
    "Save remote files when t, ignore them otherwise."
    :group 'arki/auto-save
    :type 'boolean)

  (defcustom arki/auto-save-max-filesize 10
    "File size in MB.

  If set, when the file is larger than VAL, don't do auto-save for performance issues.
  If VAL is nil, ignore the file size impact."
    :group 'arki/auto-save
    :type 'number)

  (defcustom arki/auto-save-exclude '(".emacs.d/elpa")
    "A list of regexps for buffer-file-name excluded from arki/auto-save.
  When a buffer-file-name matches any of the regexps it is ignored."
    :group 'arki/auto-save
    :type '(repeat (choice regexp)))

  (defun arki/auto-save--include-p (filename)
    "Return non-nil if FILENAME doesn't match any of the `arki/auto-save-exclude'."
    (let ((checks arki/auto-save-exclude)
          (keepit t))
      (while (and checks keepit)
        (setq keepit (not (ignore-errors
                            (if (stringp (car checks))
                                (string-match (car checks) filename))))
              checks (cdr checks)))
      keepit))



  (defun arki/auto-save--check-buffer-status ()
    "Check whether the buffer is ready for save"
    (and
     ;; And Yassnippet is not active
     (or (not (boundp 'yas--active-snippets))
         (not yas--active-snippets))
     ;; And  Company is not active
     (or (not (boundp 'company-candidates))
         (not company-candidates))
     )
    )

  ;; file size check
  (defvar arki/auto-save--cur-file-size nil "Size of current file in MB")
  (make-variable-buffer-local 'arki/auto-save--cur-file-size)

  (defun arki/auto-save--check-file-size ()
    "Check file size. According to `arki/auto-save-max-filesize'"
    (if arki/auto-save-max-filesize
        (if arki/auto-save--cur-file-size
            (<= arki/auto-save--cur-file-size arki/auto-save-max-filesize)
          (let* ((file-size-bytes (file-attribute-size (file-attributes (buffer-file-name))))
                 ;; When the file is newly created, file--attributes is nil, so let file-size be 0 now.
                 (file-size-mega-bytes (if file-size-bytes (/ file-size-bytes 1024.0 1024.0) 0)))
            (setq arki/auto-save--cur-file-size file-size-mega-bytes))
          (arki/auto-save--check-file-size)
          )
      t
      ))

  (defun arki/auto-save-command ()
    "Save the current buffer if needed."
    ;; Use (buffer-file-name) instead of buffer-file-name-variable to
    ;; avoid error when the file is new created.
    ;; The ERROR: Wrong type argument: number-or-marker-p, nil
    (let ((file-name (buffer-file-name)))
      (when (and file-name
                 ;; And not file name not excluded
                 (arki/auto-save--include-p file-name)
                 ;; And (if is remote: should allow remote save)
                 (if (file-remote-p file-name) arki/auto-save-remote-files t)
                 ;; And is not readonly
                 (not buffer-read-only)
                 ;; And modified
                 (buffer-modified-p (current-buffer))
                 ;; And writable
                 (file-writable-p file-name)
                 ;; Check buffer status: And Yassnippet is not active And  Company is not active
                 (arki/auto-save--check-buffer-status)
                 ;; And file is not too large
                 (arki/auto-save--check-file-size)
                 )
        (if arki/auto-save-silent
            (with-temp-message (format "Saving %S" file-name) (save-buffer))
          (save-buffer))
        )
      )
    )

  (defvar arki/auto-save--idle-timer nil)

  (defun arki/auto-save-command-advice (&rest _args)
    "A simple wrapper around `arki/auto-save-command' that's advice-friendly."
    (arki/auto-save-command))

  (defun arki/auto-save--advice-trigger-commands ()
    "Apply arki/auto-save advice to the commands listed in `arki/auto-save-triggers'."
    (mapc (lambda (command)
            (advice-add command :before #'arki/auto-save-command-advice))
          arki/auto-save-triggers))

  (defun arki/auto-save--advice-trigger-commands-cancel ()
    "Remove arki/auto-save advice from to the commands listed in `arki/auto-save-triggers'."
    (mapc (lambda (command) (advice-remove command #'arki/auto-save-command-advice))
          arki/auto-save-triggers))

  (defun arki/auto-save--idle-timer-init ()
    "Initialize arki/auto-save idle timer if `arki/auto-save-auto-save-when-idle' is true."
    (setq arki/auto-save--idle-timer
          (when arki/auto-save-auto-save-when-idle
            (run-with-idle-timer arki/auto-save-idle-duration t #'arki/auto-save-command))))

  (defun arki/auto-save--idle-timer-cancel ()
    "Stop arki/auto-save idle timer if `arki/auto-save--idle-timer' is set."
    (when arki/auto-save--idle-timer
      (cancel-timer arki/auto-save--idle-timer)))

  (defun arki/auto-save-stop ()
    "Cleanup arki/auto-save's advices and hooks."
    (arki/auto-save--advice-trigger-commands-cancel)
    (arki/auto-save--idle-timer-cancel)
    (dolist (hook arki/auto-save-hook-triggers)
      (remove-hook hook #'arki/auto-save-command)))

  (defun arki/auto-save-init ()
    "Setup arki/auto-save's advices and hooks."

    ;; Reset auto-save state
    (arki/auto-save-stop)
    ;; Add command advice
    (arki/auto-save--advice-trigger-commands)
    ;; Add timer
    (arki/auto-save--idle-timer-init)
    ;; Add hook
    (dolist (hook arki/auto-save-hook-triggers)
      (add-hook hook #'arki/auto-save-command)))

  ;; ;;;###autoload
  ;; (define-minor-mode arki/auto-save-mode
  ;;   "A minor mode that saves your Emacs buffers when they lose focus."
  ;;   :lighter " arki/auto-save"
  ;;   :keymap arki/auto-save-mode-map
  ;;   :group 'arki/auto-save
  ;;   :global nil
  ;;   (cond
  ;;    (arki/auto-save-mode (arki/auto-save-init))
  ;;    (t (arki/auto-save-stop))))


  (add-hook 'emacs-startup-hook 'arki/auto-save-init)
#+end_src

** Layout management
*** Resize window by borders
#+begin_src emacs-lisp
  (defcustom arki/window-move-border-default-width 1 "The default width used to enlarge or shrink window horizontally." :type 'integer)
  (defcustom arki/window-move-border-default-height 1 "The default height used to enlarge or shrink window vertically." :type 'integer)


  (defun arki/interactive-convert-prefix-to-element (prefix)
    (when prefix
      (if (listp prefix) (car prefix) prefix)))

  (require 'windmove)


  (defun arki/window-move-border (direction &optional delta)
    "Resize window by moving border.

    DIRECTION Which border to move.
    DELTA How much to move."
    (interactive (list (ido-completing-read "Choose the border:" (list "right" "left" "up" "down") nil t)
                       delta))
    ;; (message "Inputs: %S %S %S %S" direction delta (integerp delta) (listp delta))
    (let* ((cur-window (selected-window))
           (target-window (cond
                           ((string= direction "right") (selected-window))
                           ((string= direction "down") (selected-window))
                           ((string= direction "left") (windmove-find-other-window 'left))
                           ((string= direction "up") (windmove-find-other-window 'up))))
           (horizontal? (or (string= direction "right") (string= direction "left")))
           (can-resize? (windmove-find-other-window (intern direction)))
           (delta (arki/interactive-convert-prefix-to-element delta))
           (cur-delta (if horizontal?
                          (if delta delta arki/window-move-border-default-width)
                        (if delta delta arki/window-move-border-default-height))))
      ;; (message "Converted: %S %S %S %S" horizontal? can-resize? delta cur-delta)
      (when can-resize?
        ;; (message "%S %S %S" target-window cur-delta horizontal?)
        (adjust-window-trailing-edge target-window cur-delta horizontal?))))


  (defun arki/window-move-border-right (which-border delta &optional opposite)
    (if (not delta)
        (arki/window-move-border which-border (if opposite (- arki/window-move-border-default-width) arki/window-move-border-default-width))
      (customize-save-variable 'arki/window-move-border-default-width delta)
      (arki/window-move-border which-border (if opposite (- delta) delta))))

  (defun arki/window-move-border-down (which-border delta &optional opposite)
    (if (not delta)
        (arki/window-move-border which-border (if opposite (- arki/window-move-border-default-height) arki/window-move-border-default-height))
      (customize-save-variable 'arki/window-move-border-default-height delta)
      (arki/window-move-border which-border (if opposite (- delta) delta))))

  (defun arki/window-move-right-border-right (delta)
    (interactive "P")
    (arki/window-move-border-right "right" (arki/interactive-convert-prefix-to-element delta)))


  (defun arki/window-move-right-border-left (delta)
    (interactive "P")
    (arki/window-move-border-right "right" (arki/interactive-convert-prefix-to-element delta) t))

  (defun arki/window-move-left-border-right (delta)
    (interactive "P")
    (arki/window-move-border-right "left" (arki/interactive-convert-prefix-to-element delta)))

  (defun arki/window-move-left-border-left (delta)
    (interactive "P")
    (arki/window-move-border-right "left" (arki/interactive-convert-prefix-to-element delta) t))

  (defun arki/window-move-up-border-up (delta)
    (interactive "P")
    (arki/window-move-border-down "up" (arki/interactive-convert-prefix-to-element delta) t))

  (defun arki/window-move-up-border-down (delta)
    (interactive "P")
    (arki/window-move-border-down "up" (arki/interactive-convert-prefix-to-element delta)))

  (defun arki/window-move-down-border-up (delta)
    (interactive "P")
    (arki/window-move-border-down "down" (arki/interactive-convert-prefix-to-element delta) t))

  (defun arki/window-move-down-border-down (delta)
    (interactive "P")
    (arki/window-move-border-down "down" (arki/interactive-convert-prefix-to-element delta)))

  (defun arki/window-move-both-border-left (delta)
    (interactive "P")
    (arki/window-move-left-border-left delta)
    (arki/window-move-right-border-left delta))

  (defun arki/window-move-both-border-right (delta)
    (interactive "P")
    (arki/window-move-left-border-right delta)
    (arki/window-move-right-border-right delta))

  (defun arki/window-move-both-border-up (delta)
    (interactive "P")
    (arki/window-move-up-border-up delta)
    (arki/window-move-down-border-up delta))

  (defun arki/window-move-both-border-down (delta)
    (interactive "P")
    (arki/window-move-up-border-down delta)
    (arki/window-move-down-border-down delta))

  ;; (arki/define-key "<M-right>" 'arki/window-move-right-border-right)
  ;; (arki/define-key "<C-M-right>" 'arki/window-move-left-border-right)
  ;; (arki/define-key "<M-left>" 'arki/window-move-right-border-left)
  ;; (arki/define-key "<C-M-left>" 'arki/window-move-left-border-left)
  ;; (arki/define-key "<M-up>" 'arki/window-move-down-border-up)
  ;; (arki/define-key "<C-M-up>" 'arki/window-move-up-border-up)
  ;; (arki/define-key "<M-down>" 'arki/window-move-down-border-down)
  ;; (arki/define-key "<C-M-down>" 'arki/window-move-up-border-down)
#+end_src

*** Save desktop
**** Save config
#+begin_src emacs-lisp
  (defvar arki/desktop-dir (file-name-as-directory (expand-file-name "desktops" arki/cache-dir)) "The directory to save desktop.")

  (defcustom arki/desktop-current-desktop "default" "The default desktop." :group 'arki/config)

  (customize-set-value 'desktop-restore-frames t)
  (customize-set-value 'desktop-load-locked-desktop t)


  (defvar arki/desktop--tmpfile-separator "=MODE=" "The file name sperator used for saving tmp buffers.")
  (defvar arki/desktop--tmpfile-prefix "TMPBUFFER=" "The file name prefix used for saving tmp buffers.")
  (defvar arki/desktop--tmpfile-dir "tmpbuffers" "The directory name used for saving tmp buffers.")

  (defun arki/desktop--get-tmpfile-dir (desktop-name)
    (expand-file-name arki/desktop--tmpfile-dir (expand-file-name desktop-name arki/desktop-dir)))

  (defun arki/desktop--get-tmpfile-name (buffer-or-name)
    (let* ((buffer (get-buffer buffer-or-name))
           (name (buffer-name buffer))
           (mode (buffer-local-value 'major-mode buffer)))
      (concat arki/desktop--tmpfile-prefix
              name
              arki/desktop--tmpfile-separator
              (symbol-name mode))))

  (defun arki/desktop--get-tmpfile-path (desktop-name buffer-or-name)
    (expand-file-name (arki/desktop--get-tmpfile-name buffer-or-name)
                      (arki/desktop--get-tmpfile-dir desktop-name)))

  (defun arki/desktop--tmpbuffer-p (buffer-or-name)
    (let* ((buffer (get-buffer buffer-or-name))
           (cur-name (buffer-name buffer))
           (cur-file (buffer-file-name buffer))
           (cur-mode (buffer-local-value 'major-mode buffer))
           ;; (cur-modified (buffer-modified-p v))
           )
      (and (not (string-match-p "^[ *]" cur-name)) ; Don't start with whitespace or star
           (not (equal 'dired-mode cur-mode))      ; Aren't dired mode
           (not (string-match "magit" (symbol-name cur-mode)))      ; Aren't magit mode
           (not cur-file))                         ; Don't relate to any file.
      ))
  (defun arki/desktop--tmpfile-p (tmpfile-name)
    (string-prefix-p arki/desktop--tmpfile-prefix tmpfile-name))


  (defun arki/desktop--get-tempbuffer-name-mode-from-file (tmpfile-name)
    (when (arki/desktop--tmpfile-p tmpfile-name)
      (let* ((without-prefix (substring tmpfile-name (length arki/desktop--tmpfile-prefix)))
             (values (split-string without-prefix arki/desktop--tmpfile-separator)))
        (list (nth 0 values) (nth 1 values)))))


  (defun arki/desktop-tmpbuffers-save (desktop-name &optional unreference)
    "Save tmpbuffers for desktop.

  DESKTOP-NAME, save tmpbuffers to this desktop.

  UNREFERENCE, if not nil, don't reference tmpbuffers to tmpfiles.
  "
    (let* ((cur-save-dir (arki/desktop--get-tmpfile-dir desktop-name)))
      (unless (file-directory-p cur-save-dir)
        (make-directory cur-save-dir))
      (dolist (buffer (buffer-list))
        (when (arki/desktop--tmpbuffer-p buffer)
          (let ((cur-mode (buffer-local-value 'major-mode buffer))
                (cur-name (buffer-name buffer))
                (write-path (arki/desktop--get-tmpfile-path desktop-name buffer)))
            (save-current-buffer
              (if unreference
                  (with-temp-buffer (insert-buffer-substring  buffer)
                                    (write-file write-path))
                (set-buffer buffer)
                (write-file write-path))

              (message "Desktop (%s) tmpbuffer saved: %s -> %s" desktop-name cur-name write-path)))))))

  (defun arki/desktop--tmpfiles-list (desktop-name)
    "List tmpfiles of DESKTOP-NAME."
    (directory-files
     (arki/desktop--get-tmpfile-dir desktop-name)
     t
     (format "^%s" arki/desktop--tmpfile-prefix)))


  (defun arki/desktop-tmpbuffers-unreference-tmpfiles (desktop-name)
    "Remove the reference between tmpfiles and tmpbuffers.

  DESKTOP-NAME the desktop to use."
    (let ((tmpfiles-dir (arki/desktop--get-tmpfile-dir desktop-name)))
      (when (file-directory-p tmpfiles-dir)
        (dolist (file (arki/desktop--tmpfiles-list desktop-name))
          (save-current-buffer
            (let* ((buffer (get-file-buffer file))
                   (cur-name-mode (arki/desktop--get-tempbuffer-name-mode-from-file (file-name-nondirectory file)))
                   (cur-name (nth 0 cur-name-mode))
                   (cur-mode (nth 1 cur-name-mode)))
              (when buffer
                (set-buffer buffer)
                (set-visited-file-name nil)
                (rename-buffer cur-name t)
                (funcall (intern cur-mode))
                (message "Desktop (%s) tmpbuffer (%s) unreferenced: %s" desktop-name cur-name file)
                )))))))

  (defun arki/desktop-tmpbuffers-restore (desktop-name &optional force-revert)
    "Revert tmpbuffers from tmpfiles to previous state.
  Remove the tmpfile-tmpbuffer reference, restore the filename and major mode.

  DESKTOP-NAME restore from this desktop.
  FORCE-REVERT if not nil, restore the tmpbuffer which hasn't been saved to desktop file.

  Check whether have been loaded.
  If loaded and have the tmpfile reference: Restore to previous state.
  Else, load tmpfiles and restore to previous state.
  "
    (let ((tmpfiles-dir (arki/desktop--get-tmpfile-dir desktop-name)))
      (when (file-directory-p tmpfiles-dir)
        (dolist (file (arki/desktop--tmpfiles-list desktop-name))
          (save-current-buffer
            (let* ((buffer (get-file-buffer file))
                   (cur-name-mode (arki/desktop--get-tempbuffer-name-mode-from-file (file-name-nondirectory file)))
                   (cur-name (nth 0 cur-name-mode))
                   (cur-mode (nth 1 cur-name-mode)))
              (if (not buffer)
                  (if (not force-revert)
                      (message "Desktop hasn't revert tmpbuffer: %s -> %s" cur-name file)
                    (set-buffer (get-buffer-create cur-name))
                    (insert-file-contents file nil nil nil t)
                    (funcall (intern cur-mode))
                    (message "Desktop tmpbuffer reverted: %s" (buffer-name)))
                (set-buffer buffer)
                (set-visited-file-name nil)
                (rename-buffer cur-name t)
                (funcall (intern cur-mode))
                (message "Desktop tmpbuffer reverted: %s" (buffer-name))))))
        )))


  (defun arki/desktop--list ()
    (if (file-directory-p arki/desktop-dir)
        (directory-files arki/desktop-dir nil "[^.]")
      (make-directory arki/desktop-dir t)
      nil))

  (defun arki/desktop-save (&optional desktop-name release only-if-changed)
    (interactive (list
                  (ido-completing-read "Save to this desktop:" (let* ((dirs (arki/desktop--list)))
                                                                 (if dirs dirs (list arki/desktop-current-desktop)))
                                       nil nil arki/desktop-current-desktop)
                  t
                  t))
    (if desktop-name
        (customize-save-variable 'arki/desktop-current-desktop desktop-name)
      (setq desktop-name arki/desktop-current-desktop))

    (let ((cur-desktop-dir (expand-file-name desktop-name arki/desktop-dir)))
      (unless (file-directory-p cur-desktop-dir)
        (make-directory cur-desktop-dir t))
      (arki/desktop-tmpbuffers-save desktop-name) ;Persist tmpbuffers to tmpfiles and retain the references.
      (desktop-save cur-desktop-dir release only-if-changed) ;Save buffers with tmpfiles.
      (arki/desktop-tmpbuffers-unreference-tmpfiles desktop-name) ;Restore previous state of tmpbuffers.
      (message "Desktop saved: %s" desktop-name)))

  (defun arki/desktop-remove (desktop-name)
    (interactive (list
                  (ido-completing-read "Remove this desktop:" (arki/desktop--list) nil t arki/desktop-current-desktop)))
    (when desktop-name
      (let ((cur-desktop-dir (expand-file-name desktop-name arki/desktop-dir)))
        (when (file-directory-p cur-desktop-dir)
          (delete-directory cur-desktop-dir t)
          (when (string= desktop-name arki/desktop-current-desktop)
            (arki/defcustom-reset-value 'arki/desktop-current-desktop))
          (message "Desktop removed: %s" desktop-name)))))

  (defvar arki/desktop-load-before-hook nil "Hook before 'arki/desktop-load is executed.")
  (defun arki/desktop-load (&optional desktop-name)
    (interactive (list
                  (ido-completing-read "Read this desktop:" (arki/desktop--list) nil t arki/desktop-current-desktop)))
    (unless desktop-name (setq desktop-name arki/desktop-current-desktop))
    (dolist (fn arki/desktop-load-before-hook) (funcall fn))
    (desktop-clear)
    (let ((cur-desktop-dir (expand-file-name desktop-name arki/desktop-dir)))
      (if (file-directory-p cur-desktop-dir)
          (progn (desktop-read cur-desktop-dir)
                 (customize-save-variable 'arki/desktop-current-desktop desktop-name)
                 ;; (arki/desktop-tmpbuffers-restore desktop-name t)
                 (arki/desktop-tmpbuffers-unreference-tmpfiles desktop-name) ;Restore previous state of tmpbuffers.
                 (message "Desktop opened: %s" desktop-name))
        (message "Current desktop doesn't exist: %s" desktop-name))))
#+end_src

**** Ignore some theme related params
#+begin_src emacs-lisp
  (push '(minibuffer . :never) frameset-filter-alist)
  (push '(font . :never) frameset-filter-alist)
  (push '(font-parameter . :never) frameset-filter-alist)
  (push '(border-width . :never) frameset-filter-alist)
  (push '(internal-border-width . :never) frameset-filter-alist)
  (push '(right-divider-width . :never) frameset-filter-alist)
  (push '(bottom-divider-width . :never) frameset-filter-alist)
  (push '(vertical-scroll-bars . :never) frameset-filter-alist)
  (push '(horizontal-scroll-bars . :never) frameset-filter-alist)
  (push '(foreground-color . :never) frameset-filter-alist)
  (push '(background-color . :never) frameset-filter-alist)
  (push '(mouse-color . :never) frameset-filter-alist)
  (push '(border-color . :never) frameset-filter-alist)
  (push '(screen-gamma . :never) frameset-filter-alist)
  (push '(line-spacing . :never) frameset-filter-alist)
  (push '(left-fringe . :never) frameset-filter-alist)
  (push '(right-fringe . :never) frameset-filter-alist)
  (push '(no-special-glyphs . :never) frameset-filter-alist)
  (push '(scroll-bar-foreground . :never) frameset-filter-alist)
  (push '(scroll-bar-background . :never) frameset-filter-alist)
  (push '(menu-bar-lines . :never) frameset-filter-alist)
  (push '(tab-bar-lines . :never) frameset-filter-alist)
  (push '(tool-bar-lines . :never) frameset-filter-alist)
  (push '(wait-for-wm . :never) frameset-filter-alist)
  (push '(tool-bar-position . :never) frameset-filter-alist)
  (push '(inhibit-double-buffering . :never) frameset-filter-alist)
  (push '(icon-type . :never) frameset-filter-alist)
  (push '(auto-raise . :never) frameset-filter-alist)
  (push '(auto-lower . :never) frameset-filter-alist)
  (push '(cursor-type . :never) frameset-filter-alist)
  (push '(scroll-bar-width . :never) frameset-filter-alist)
  (push '(scroll-bar-height . :never) frameset-filter-alist)
  (push '(alpha . :never) frameset-filter-alist)
  (push '(no-focus-on-map . :never) frameset-filter-alist)
  (push '(no-accept-focus . :never) frameset-filter-alist)
  (push '(fullscreen . :never) frameset-filter-alist)
  (push '(visibility . :never) frameset-filter-alist)
  (push '(skip-taskbar . :never) frameset-filter-alist)
  (push '(z-group . :never) frameset-filter-alist)
  (push '(display-type . :never) frameset-filter-alist)
  (push '(background-mode . :never) frameset-filter-alist)
  (push '(cursor-color . :never) frameset-filter-alist)
  (push '(sticky . :never) frameset-filter-alist)
  (push '(environment . :never) frameset-filter-alist)
  (push '(last-focus-update . :never) frameset-filter-alist)
  (push '(modeline . :never) frameset-filter-alist)
#+end_src

*** Assign keystroke
Use <M-SPC w> to activate, then:
- press <?> for help.
- Using arrow keys to resize current window by their borders.
- Press <s> to save desktop.
- Press <l> to load desktop.
- Press <k> to remove desktop.

#+begin_src emacs-lisp
  (defvar arki/layout-help-message
    "Move window borders by arrows.
  Default to the right or down border.
  With <M> for the left or up.
  With <C-M> for both borders.
  With <C> to move cursor across adjacent windows.
  TODO: With <S> to move current window around.

  Press <s> to save desktop.
  Press <l> to load desktop.
  Press <k> to remove desktop.

  Press <?> for help."
    "The help message for window move.")


  (defun arki/layout ()
    (interactive)
    ;; https://stackoverflow.com/questions/46512076/how-to-pass-current-prefix-arg-to-this-command
    (setq prefix-arg current-prefix-arg)
    (if prefix-arg
        (message "Move window borders [Prefix: %S]. Press ? for help." prefix-arg)
      (message "Move window borders. Press ? for help.")
      )


    (set-transient-map
     (let ((map (make-sparse-keymap)))
       (define-key map (kbd "<right>") 'arki/window-move-right-border-right)
       (define-key map (kbd "<M-right>") 'arki/window-move-left-border-right)
       (define-key map (kbd "<C-M-right>") 'arki/window-move-both-border-right)
       (define-key map (kbd "<C-right>") 'windmove-right)

       (define-key map (kbd "<left>") 'arki/window-move-right-border-left)
       (define-key map (kbd "<M-left>") 'arki/window-move-left-border-left)
       (define-key map (kbd "<C-M-left>") 'arki/window-move-both-border-left)
       (define-key map (kbd "<C-left>") 'windmove-left)

       (define-key map (kbd "<up>") 'arki/window-move-down-border-up)
       (define-key map (kbd "<M-up>") 'arki/window-move-up-border-up)
       (define-key map (kbd "<C-M-up>") 'arki/window-move-both-border-up)
       (define-key map (kbd "<C-up>") 'windmove-up)

       (define-key map (kbd "<down>") 'arki/window-move-down-border-down)
       (define-key map (kbd "<M-down>") 'arki/window-move-up-border-down)
       (define-key map (kbd "<C-M-down>") 'arki/window-move-both-border-down)
       (define-key map (kbd "<C-down>") 'windmove-down)

       (define-key map (kbd "s") 'arki/desktop-save)
       (define-key map (kbd "l") 'arki/desktop-load)
       (define-key map (kbd "k") 'arki/desktop-remove)

       (define-key map "?" (lambda () (interactive) (message arki/layout-help-message)))
       map)
     t))

  (arki/define-key "w" 'arki/layout 'arki/prefix-keymap)


  ;; (define-prefix-command 'arki/window-move-keymap)
  ;; (arki/define-key "w" 'arki/window-move-keymap 'arki/prefix-keymap)

  ;; (arki/define-key "<right>" 'arki/window-move-right-border-right 'arki/window-move-keymap)
  ;; (arki/define-key "<M-right>" 'arki/window-move-left-border-right 'arki/window-move-keymap)
  ;; (arki/define-key "<C-M-right>" 'arki/window-move-both-border-right 'arki/window-move-keymap)
  ;; (arki/define-key "<C-right>" 'windmove-right 'arki/window-move-keymap)

  ;; (arki/define-key "<left>" 'arki/window-move-right-border-left 'arki/window-move-keymap)
  ;; (arki/define-key "<M-left>" 'arki/window-move-left-border-left 'arki/window-move-keymap)
  ;; (arki/define-key "<C-M-left>" 'arki/window-move-both-border-left 'arki/window-move-keymap)
  ;; (arki/define-key "<C-left>" 'windmove-left 'arki/window-move-keymap)

  ;; (arki/define-key "<up>" 'arki/window-move-down-border-up 'arki/window-move-keymap)
  ;; (arki/define-key "<M-up>" 'arki/window-move-up-border-up 'arki/window-move-keymap)
  ;; (arki/define-key "<C-M-up>" 'arki/window-move-both-border-up 'arki/window-move-keymap)
  ;; (arki/define-key "<C-up>" 'windmove-up 'arki/window-move-keymap)

  ;; (arki/define-key "<down>" 'arki/window-move-down-border-down 'arki/window-move-keymap)
  ;; (arki/define-key "<M-down>" 'arki/window-move-up-border-down 'arki/window-move-keymap)
  ;; (arki/define-key "<C-M-down>" 'arki/window-move-both-border-down 'arki/window-move-keymap)
  ;; (arki/define-key "<C-down>" 'windmove-down 'arki/window-move-keymap)

  ;; (arki/define-key "s" 'arki/desktop-save 'arki/window-move-keymap)
  ;; (arki/define-key "l" 'arki/desktop-load 'arki/window-move-keymap)
  ;; (arki/define-key "k" 'arki/desktop-remove 'arki/window-move-keymap)
  ;; (arki/define-key "k" (lambda () (interactive) (message arki/layout-help-message)) 'arki/window-move-keymap)
#+end_src

** Start server
#+begin_src emacs-lisp
  (server-start)
#+end_src

* Setup extra packages or features
:PROPERTIES:
:header-args: :tangle yes :comments link
:END:
** Set melpa and mirror
1. Officials
   | [[https://elpa.gnu.org/][GNU]]          | https://elpa.gnu.org/packages/     |
   | [[https://melpa.org/#/getting-started][MELPA]]        | https://melpa.org/packages/        |
   | MELPA Stable | https://stable.melpa.org/packages/ |
2. [[https://mirrors.tuna.tsinghua.edu.cn/help/elpa/][TsingHua]]
   | GNU          | http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/          |
   | MELPA        | http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/        |
   | MELPA Stable | http://mirrors.tuna.tsinghua.edu.cn/elpa/stable-melpa/ |
2. [[https://elpa.emacs-china.org/][emacs-china]]
   如果需要 HTTPS，请将镜像地址中的 http 改成 https 
   | GNU          | http://elpa.emacs-china.org/gnu/          |
   | MELPA        | http://elpa.emacs-china.org/melpa/        |
   | MELPA Stable | http://elpa.emacs-china.org/stable-melpa/ |


#+begin_src emacs-lisp
  (push '("emacs-china" . (("gnu"   . "https://elpa.emacs-china.org/gnu/")
                           ("melpa" . "https://elpa.emacs-china.org/melpa/")))
        arki/package-archives-mirrors)

  (push '("TsingHua" . (("gnu"   . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
                        ("melpa" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")))
        arki/package-archives-mirrors)

  (arki/package-archives-mirror-switch "TsingHua")

  ;; Import new GNU ELPA keys (if any) into package.el’s keyring.
  (require-pack 'gnu-elpa-keyring-update)
#+end_src

** ease-editor
#+begin_src emacs-lisp
  ;; --------------------------------------------------NAVIGATION--------------------------------------------------
  ;; Config editor navigation

  ;; ;; https://github.com/winterTTr/ace-jump-mode
  ;; ;; https://www.emacswiki.org/emacs/AceJump
  ;; (when (require-pack 'ace-jump-mode)
  ;;   (arki/define-key "C-c SPC" 'ace-jump-mode)
  ;;   (eval-after-load "ace-jump-mode"
  ;;     '(ace-jump-mode-enable-mark-sync))
  ;;   (arki/define-key "C-x SPC" 'ace-jump-mode-pop-mark))

  ;; https://github.com/abo-abo/avy
  (when (require-pack 'avy)
    (arki/define-key "C-s" 'avy-goto-char-timer)
    (setq avy-timeout-seconds 0.6)
    (with-eval-after-load "isearch"
      (arki/define-key "C-'" 'avy-isearch 'isearch-mode-map))
    ;; (global-set-key (kbd "C-:") 'avy-goto-char)
    ;; (global-set-key (kbd "C-'") 'avy-goto-char-2)
    ;; (global-set-key (kbd "M-g f") 'avy-goto-line)
    ;; (global-set-key (kbd "M-g w") 'avy-goto-word-1)
    ;; (global-set-key (kbd "M-g e") 'avy-goto-word-0)
    )

  ;; Move current line or region with M-up or M-down.
  (when (require-pack 'move-text)
    ;; 配置move-text. Use default bindings for move-text-up and move-text-down (M-up / M-down).
    ;; (move-text-default-bindings)
    (arki/define-key "M-<down>" 'move-text-down)
    (arki/define-key "M-<up>"   'move-text-up)
    )

  ;; https://github.com/magnars/expand-region.el
  (when (require-pack 'expand-region)
    (arki/define-key "C-=" 'er/expand-region)
    (arki/define-key "C-+" 'er/contract-region))


  ;; --------------------------------------------------EDIT TEXT--------------------------------------------------
  (when (require-pack 'hungry-delete)
    ;; 启用hungry-delete
    (global-hungry-delete-mode)
    )

  ;; browse-kill-ring
  ;; https://github.com/browse-kill-ring/browse-kill-ring
  (when (require-pack 'browse-kill-ring)
    (browse-kill-ring-default-keybindings)
    (setq browse-kill-ring-highlight-inserted-item t)
    (setq browse-kill-ring-highlight-current-entry t)
    (setq browse-kill-ring-show-preview nil))

  ;; bbyac
  ;; https://github.com/baohaojun/bbyac
  (when (require-pack 'browse-kill-ring)
    (when (require-pack 'bbyac)
      ;; Type a little bit and press M-g <return> to complete a word or M-s <return> to complete an arbitrary string.
      (bbyac-global-mode 1)))

  ;; Multiple cursors
  (when (require-pack 'multiple-cursors)
    (arki/define-key "C-S-c C-S-c" 'mc/edit-lines)
    (arki/define-key "C->" 'mc/mark-next-like-this)
    (arki/define-key "C-<" 'mc/mark-previous-like-this)
    (arki/define-key "C-c C-<" 'mc/mark-all-like-this)
    (arki/define-key "C-S-<mouse-1>" 'mc/add-cursor-on-click)
    (when (featurep 'hungry-delete)
      (when (boundp 'mc/cmds-to-run-for-all)
        (add-to-list 'mc/cmds-to-run-for-all 'hungry-delete-backward)
        (add-to-list 'mc/cmds-to-run-for-all 'hungry-delete-forward)))
    )

  ;; --------------------------------------------------SHOW OUTLINE--------------------------------------------------

  ;; https://github.com/bmag/imenu-list
  (when (require-pack 'imenu-list)
    (add-hook 'markdown-mode-hook
              (lambda ()
                (arki/define-key "C-'" #'imenu-list-smart-toggle 'markdown-mode-map)
                ))
    (add-hook 'org-mode-hook
              (lambda ()
                (arki/define-key "C-'" #'imenu-list-smart-toggle 'org-mode-map)
                ))
    (setq imenu-list-position 'left)
    (setq imenu-list-size 36)
    (setq imenu-list-focus-after-activation nil)
    (setq imenu-list-auto-resize nil)
    (setq imenu-list-after-jump-hook nil)
    (add-hook 'imenu-list-after-jump-hook (lambda () (recenter-top-bottom 0)))
    )
#+end_src

** dired
#+begin_src emacs-lisp
  (with-eval-after-load 'dired

    ;; https://github.com/purcell/diredfl
    ;; This is adapted from the extra font lock rules provided by Drew Adams' `dired+' package
    (when (require-pack 'diredfl)
      (add-hook 'dired-mode-hook 'diredfl-mode))

    (when (memq system-type '(gnu gnu/linux gnu/kfreebsd cygwin))
      ;; https://gitlab.com/xuhdev/dired-quick-sort#dired-quick-sort
      (when (require-pack 'dired-quick-sort)
        (dired-quick-sort-setup)
        (arki/define-key "S" 'hydra-dired-quick-sort/body 'dired-mode-map)
        )
      )
    )
#+end_src

** theme
Only set theme for ~display-graphic-p~ is ~t~.
[[https://stackoverflow.com/a/5801740/12364313][How to detect that emacs is in terminal-mode]]
*** doom-themes doom-modeline                                                 :manually:
1. [[https://github.com/hlissner/emacs-doom-themes/blob/master/doom-themes.el][doom-themes]]需要使用[[https://github.com/domtronn/all-the-icons.el/][all-the-icons]]插件。而 ~all-the-icons~ 需要使用[[https://github.com/domtronn/all-the-icons.el/tree/master/fonts][一些符号字体]]。
2. 可以直接下载安装，也可以使用命令 ~all-the-icons-install-fonts~ 安装，但是这个命令可能没有自己下载快，
   有时候因为网络原因会卡住。
3. [[https://github.com/seagle0128/doom-modeline][doom-modeline]]也需要这些字体？

#+begin_src emacs-lisp
  ;; Config theme
  ;; Favorite themes: monokai-theme solarized-theme gruvbox-theme

  ;; https://github.com/hlissner/emacs-doom-themes/blob/master/doom-themes.el
  (defun init-theme()
    (when (require-pack 'doom-themes)
      ;; (load-theme 'doom-dark+)
      ;; (load-theme 'doom-molokai t)
      ;; (load-theme 'doom-one t)        ; doom-one-light
      (load-theme 'doom-one-light t)
      (setq doom-themes-enable-bold t)
      (setq doom-themes-enable-italic t)
      (setq doom-themes-treemacs-theme "doom-colors")
      (doom-themes-treemacs-config)
      (doom-themes-org-config)
      ;; https://github.com/domtronn/all-the-icons.el/
      ;; 需要安装字体文件：M-x all-the-icons-install-fonts
      (require-pack 'all-the-icons)
      )

    (message "Done: init-theme.")
    )
  ;; https://github.com/seagle0128/doom-modeline
  ;; Can be used in terminal.
  (when (require-pack 'doom-modeline)
    (doom-modeline-mode))

  (arki/add-hook-for-graphic-frame-init 'init-theme)
#+end_src

*** beacon mode-line-bell
当光标跳转时，容易找不到新位置，使用[[https://github.com/Malabarba/beacon][beacon]]可以高亮显示新位置。
#+begin_src emacs-lisp
  (when (require-pack 'beacon)
    (beacon-mode 1)
    (custom-set-variables
     '(beacon-color "#CD5C5C")
     '(beacon-size 25)
     '(beacon-blink-delay 0.3)        ;Time, in seconds, before starting to fade the beacon.
     '(beacon-blink-duration 0.3)        ;Time, in seconds, that the blink should last.
     '(beacon-blink-when-point-moves-horizontally 12)
     '(beacon-blink-when-point-moves-vertically 2))
    )

  ;; A simple visible bell which works in all terminal types
  ;; https://github.com/purcell/mode-line-bell
  (when (require-pack 'mode-line-bell)
    (add-hook 'after-init-hook 'mode-line-bell-mode)
    )

  ;; (when (require-pack 'on-screen)
  ;;   (on-screen-global-mode +1))
#+end_src

** env
#+begin_src emacs-lisp
  ;; let emacs could find the executable
  ;; https://github.com/purcell/exec-path-from-shell
  (when (memq window-system '(mac ns x))
    (when (require-pack 'exec-path-from-shell)
      (dolist (var '("SSH_AUTH_SOCK" "SSH_AGENT_PID"))
        (add-to-list 'exec-path-from-shell-variables var))
      (exec-path-from-shell-initialize))
    )
#+end_src

** dashboard
#+begin_src emacs-lisp
  ;; https://github.com/emacs-dashboard/emacs-dashboard
  (when (require-pack 'dashboard)
    ;; (dashboard-setup-startup-hook)
    (arki/define-key "o" 'dashboard-refresh-buffer 'arki/prefix-keymap)
    (setq dashboard-startup-banner nil) ;'official
    (when dashboard-startup-banner
      (setq dashboard-banner-logo-title "Nice day, isn't it?"))
    (setq dashboard-center-content t)
    (setq dashboard-items '((bookmarks . 25)
                            (projects . 25)
                            (registers . 25)
                            (recents . 50)
                            ))
    (setq dashboard-show-shortcuts t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-footer nil)
    )
#+end_src

** screensaver
*** Define zone-timer
#+begin_src emacs-lisp
  (require 'zone)
  (require 'color)
  (require 'cl-lib)

  (defgroup zone-timer nil
    "Zone out with timer."
    :group 'games)
  ;; Rainbow effect learnt from: https://github.com/kawabata/zone-rainbow
  (defcustom zone-timer-rainbow-hue-factor 50 "Hue factor." :group 'zone-timer)
  (defcustom zone-timer-rainbow-sat 1.0 "Saturation." :group 'zone-timer)
  (defcustom zone-timer-rainbow-light 0.5 "Light." :group 'zone-timer)
  (defcustom zone-timer-rainbow-background nil "If not nil, Background color." :group 'zone-timer)
  (defcustom zone-timer-interval 30 "Interval (in seconds) to show the new time." :group 'zone-timer)
  (defcustom zone-timer-rainbow-enable t "Whether to enable rainbow effect. t: enable. nil: disable." :group 'zone-timer)
  (defcustom zone-timer-format-string "%Y-%m-%d %k:%M:%S" "Used to format time. See: `format-time-string'" :group 'zone-timer)
  (defcustom zone-timer-start-column -1 "The start column number from where to print time. -1 means the middle of window." :group 'zone-timer)
  (defun zone-pgm-timer ()
    "Show current time."
    (delete-other-windows)
    (let* ((start-column (if (= zone-timer-start-column -1)
                             (- (/ (window-width) 2) (/ (length (format-time-string zone-timer-format-string)) 2))
                           zone-timer-start-column
                           )
                         )
           (start-time (current-time))
           (pre-time start-time)
           (pre-second (nth 1 pre-time))
           (k 0))

      (when (not (input-pending-p))
        (delete-region (point-min) (point-max))
        (insert (concat (make-string start-column (string-to-char " ")) (format-time-string zone-timer-format-string start-time)))
        (newline) (sit-for 0.1))
      ;; 渲染流动彩色
      (while (not (input-pending-p))
        ;; 更新时间
        (let* ((cur-time (current-time))
               (cur-second (nth 1 cur-time)))
          (when (> cur-second pre-second)    ; 需要更新秒
            (delete-region (line-beginning-position) (line-end-position))
            (insert (concat (make-string start-column (string-to-char " ")) (format-time-string zone-timer-format-string cur-time)))
            (setq pre-second cur-second)
            (sit-for 0.01)
            (when (>= (- cur-second (nth 1 pre-time)) zone-timer-interval) ; 需要更新时间间隔
              (if (< (line-number-at-pos) (- (window-height) 3)) ;判断是不是最后一行，是最后一行的话需要跳到开始
                  (newline)
                (delete-region (point-min) (point-max)))
              (setq pre-time cur-time))
            )

          ;; 渲染单帧彩色
          (when (and zone-timer-rainbow-enable (display-graphic-p))
            (cl-loop
             for i from (window-start) to (1- (window-end)) do
             (add-text-properties
              i (1+ i)
              `(face ((foreground-color
                       . ,(apply 'color-rgb-to-hex
                                 (color-hsl-to-rgb
                                  (/ (* (% (+ i k) zone-timer-rainbow-hue-factor) 1.0)
                                     zone-timer-rainbow-hue-factor)
                                  zone-timer-rainbow-sat zone-timer-rainbow-light)))
                      ,@(when zone-timer-rainbow-background
                          `((background-color
                             . ,zone-timer-rainbow-background)))))))
            (cl-incf k))
          (sit-for 0.1)))))


  ;;;###autoload
  (defun zone-timer ()
    "Zone out with rainbow."
    (interactive)
    (let ((zone-programs [zone-pgm-timer])
          (zone-timer-interval 5))
      (zone)))
#+end_src

*** Enable zone-timer when idle
#+begin_src emacs-lisp
  ;; 启用zone
  (setq zone-programs [zone-pgm-timer])
  (zone-when-idle 36000)
#+end_src

** which-key
#+begin_src emacs-lisp
  ;; https://github.com/justbur/emacs-which-key
  (when (require-pack 'which-key)
    ;; Allow C-h to trigger which-key before it is done automatically
    (setq which-key-show-early-on-C-h t)
    ;; make sure which-key doesn't show normally but refreshes quickly after it is triggered.
    (setq which-key-idle-delay 0.6)
    (setq which-key-idle-secondary-delay 0.05)
    (which-key-mode)
    ;; Supported types are minibuffer, side-window, frame, and custom.
    (setq which-key-popup-type 'side-window)

    ;; location of which-key window. valid values: top, bottom, left, right, or a list of any of the two.
    (setq which-key-side-window-location 'bottom)
    ;; max width of which-key window, when displayed at left or right.
    (setq which-key-side-window-max-width 60)
    ;; max height of which-key window, when displayed at top or bottom.
    (setq which-key-side-window-max-height 10)
    )
#+end_src

** auto-complete
#+begin_src emacs-lisp
  ;; Input completion -- Completion of your input in the minibuffer. (See also Minibuffer Completion in the manual.)

  ;; Replace ido-mode with vertico.
  ;; (ido-mode t)
  (setq ido-enable-flex-matching t)

  ;; https://github.com/minad/vertico
  (when (require-pack 'vertico)
    (vertico-mode)

    (savehist-mode)

    ;; Different scroll margin
    (setq vertico-scroll-margin 0)

    ;; Show more candidates
    (setq vertico-count 10)

    ;; Grow and shrink the Vertico minibuffer
    (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)

    ;; (vertico-indexed-mode -1)
    ;; (vertico-grid-mode -1)
    ;; (vertico-reverse-mode -1)
    (vertico-mouse-mode)
    (arki/define-key "M-'" 'vertico-quick-insert 'vertico-map)
    (arki/define-key "C-'" 'vertico-quick-exit 'vertico-map)

    (vertico-multiform-mode)

    ;; Sort directories before files
    (defun sort-directories-first (files)
      (setq files (vertico-sort-history-length-alpha files))
      (nconc (seq-filter (lambda (x) (string-suffix-p "/" x)) files)
             (seq-remove (lambda (x) (string-suffix-p "/" x)) files)))

    (setq vertico-multiform-commands '((execute-extended-command reverse)
                                       (find-file reverse (vertico-sort-function . sort-directories-first))))


    ;; https://github.com/minad/marginalia
    (when (require-pack 'marginalia)
      (marginalia-mode)
      (arki/define-key "M-T" 'marginalia-cycle 'minibuffer-local-map))

    ;; (setq vertico-multiform-categories
    ;;       '((file grid reverse)
    ;;         (grep buffer)
    ;;         ))


    ;; https://github.com/minad/consult
    (when (require-pack 'consult)
      (arki/define-key "C-S-s" 'consult-line)
      (add-to-list 'vertico-multiform-commands '(consult-grep buffer))
      (arki/define-key "C-x b" 'consult-buffer)
      (add-to-list 'vertico-multiform-commands '(consult-buffer reverse))
      )
    ;; https://github.com/oantolin/embark
    (when (require-pack 'embark)
      (arki/define-key "C-." 'embark-act))

    (with-eval-after-load 'consult
      (with-eval-after-load 'embark
        (require-pack 'embark-consult)))

    )


  ;; https://github.com/oantolin/orderless
  (when (require-pack 'orderless)
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))



  ;; https://github.com/joaotavora/yasnippet
  (when (require-pack 'yasnippet)
    (yas-global-mode 1)
    ;; https://github.com/AndreaCrotti/yasnippet-snippets
    (require-pack 'yasnippet-snippets)
    )


  ;; Config company

  ;; https://www.youtube.com/watch?v=zSPraaX2524
  ;; https://github.com/tonyaldon/emacs.d/blob/master/settings/settings/setup-completion.el

  ;; https://www.youtube.com/watch?v=oyockkWcHp0
  ;; https://github.com/jerryhsieh/Emacs-config/blob/company/init.el
  (when (require-pack 'company)
    ;; 开启全局 Company 补全
    (global-company-mode 1)

    (setq company-idle-delay 0.1)
    (make-variable-buffer-local 'company-idle-delay)

    (setq company-selection-wrap-around t)
    (setq company-tooltip-limit 9)
    (arki/define-key ">" 'company-filter-candidates 'company-active-map)


    ;; change C-n C-p
    (with-eval-after-load 'company
      (arki/define-key "C-n" 'company-select-next 'company-active-map)
      (arki/define-key "C-p" 'company-select-previous 'company-active-map)
      (arki/define-key "M-n" nil 'company-active-map)
      (arki/define-key "M-p" nil 'company-active-map))


    (setq company-minimum-prefix-length 1)
    (make-variable-buffer-local 'company-minimum-prefix-length)

    ;; company-yasnippet must work with yasnippet and yasnippet-snippets
    (setq company-backends
          '((company-files company-keywords company-capf company-yasnippet)
            (company-abbrev company-dabbrev)))
    ;; (make-variable-buffer-local 'company-backends)

    ;; (setq company-transformers '(company-sort-by-backend-importance))

    (defun company-emacs-lisp-mode()
      "Set up `company-mode'  for `emacs-lisp-model'."
      (set (make-local-variable 'company-backends)
           '((company-yasnippet
              company-elisp
              company-dabbrev-code
              company-files))))
    (add-hook 'emacs-lisp-mode-hook 'company-emacs-lisp-mode)

    (defun company-text-mode ()
      "Set up `company-mode' for `text-mode'."
      (set (make-local-variable 'company-backends)
           '((company-files company-yasnippet) company-dabbrev))
      (setq company-minimum-prefix-length 2))
    (add-hook 'text-mode-hook 'company-text-mode)

    (defun company-shell-mode ()
      "Set up `company-mode' for `shell-mode'"
      (message "SHELL mode company")
      (set (make-local-variable 'company-backends)
           '((company-files company-yasnippet)))
      (setq company-minimum-prefix-length 1)
      (setq company-idle-delay 0.1))
    (add-hook 'shell-mode-hook 'company-shell-mode)
    )

  ;; ;; 配置swiper
  ;; ;; 用consult-line代替了
  ;; (when (require-pack 'swiper)
  ;;   ;; (ivy-mode 1)
  ;;   ;; ;; minibuffer 里面的 M-i 绑定 与输入法的冲突了，解绑掉
  ;;   ;; (arki/define-key "M-i" nil 'ivy-minibuffer-map)
  ;;   ;; (setq ivy-use-virtual-buffers nil) ;I dont't need virtual buffer for now, so commented out.
  ;;   ;; (setq enable-recursive-minibuffers nil)

  ;;   ;; enable this if you want `swiper' to use it
  ;;   ;; (setq search-default-mode #'char-fold-to-regexp)
  ;;   (setq search-default-mode t)
  ;;   (arki/define-key "C-S-s" 'swiper)

  ;;   )
#+end_src

** elisp
#+begin_src emacs-lisp
  ;; 在emacs-lisp模式下括号高亮匹配
  (when (require-pack 'smartparens)
    ;; 配置smartparens
    (add-hook 'emacs-lisp-mode-hook 'smartparens-mode) ;在emacs-lisp-mode模式时加载smartparens
    ;; (smartparens-global-mode t) ;所有模式都加载smartparens
    )
  ;; 将函数扩展为光标不在括号上也能显示两侧的括号
  (define-advice show-paren-function (:around (fn) fix-show-paren-function)
    "Highlight enclosing parens."
    (cond ((looking-at-p "\\s(") (funcall fn))
          (t (save-excursion
               (ignore-errors (backward-up-list))
               (funcall fn)))))
  ;; 激活show-paren-mode
  (add-hook 'emacs-lisp-mode-hook 'show-paren-mode)

  ;; Find elisp source code.
  (arki/define-key "C-h C-f" 'find-function)
  (arki/define-key "C-h C-v" 'find-variable)
  (arki/define-key "C-h C-k" 'find-function-on-key)
#+end_src

** org                                                            :manually:
其中 ~org-web-tools~ 需要安装[[https://pandoc.org/][pandoc]],将html转成org文挡
#+begin_src emacs-lisp
  (require 'org)

  ;; org-mode needs this
  (require-pack 'htmlize)
  (require-pack 'org-preview-html)

  ;; https://github.com/integral-dw/org-superstar-mode
  ;; Deprecated now: Use org-num-mode and org-bars instead.
  ;; (when (require-pack 'org-superstar)
  ;;   (add-hook 'org-mode-hook 'org-superstar-mode)
  ;;   (with-eval-after-load "org-superstar"
  ;;     ;; (setq org-superstar-headline-bullets-list '("☰" "☱" "☲" "☳" "☴" "☵" "☶" "☷")))
  ;;     (setq org-superstar-headline-bullets-list '("\u200b")))
  ;;   )

  (add-hook 'org-mode-hook
            (lambda ()
              ;; (org-content 3)             ;Disable this for the convenience restore org buffer.

              ;; Config view options
              (setq line-spacing 0.1)
              (setq org-src-fontily-natively t)
              (org-indent-mode 1)
              (org-num-mode 1)

              ;; Config markup
              (setq org-hide-emphasis-markers t) ;显示斜体、加粗之类的字体
              (setq org-pretty-entities t)       ;显示上坡线指出的希腊字母、箭头图像之类的字符
              (setq org-pretty-entities-include-sub-superscripts t) ;显示下角标、上角标
              ;; When setting this variable to {}, ‘a_b’ is not interpreted as a subscript, but ‘a_{b}’ is
              (setq org-use-sub-superscripts '{})              ;限定_或者^后面跟着{}时候才使用上角标、下角标
              ;; Add markup to text that spans more than two consecutive lines
              ;; https://emacs.stackexchange.com/questions/13820/inline-verbatim-and-code-with-quotes-in-org-mode/13828#13828
              ;; Default value of org-emphasis-regexp-components: ("-[:space:]('\"{" "-[:space:].,:!?;'\")}\\[" "[:space:]" "." 1)
              (setcar (nthcdr 4 org-emphasis-regexp-components) 3)
              (org-set-emph-re 'org-emphasis-regexp-components org-emphasis-regexp-components)

              ;; Config export options
              (setq org-export-with-sub-superscripts '{})          ;设置导出时候，限定_或者^后面跟着{}时候才渲染上角标、下角标
              (setq org-export-with-emphasis t)              ;设置导出时候，渲染斜体、加粗之类的字体

              ;; Config agenda related
              (setq org-log-done 'time)
              (setq org-log-done-with-time t)

              ;; Config org bars.
              (when (display-graphic-p)
                (when (require-pack-local 'org-bars t "https://gitee.com/p1uxtar/org-bars/raw/master/org-bars.el")
                  (org-num-mode 0)
                  (org-bars-mode 1)
                  (setq org-bars-color-options '(:desaturate-level-faces -6 :darken-level-faces -16))
                  (setq line-spacing nil)
                  ))
              ;; Toggle blocks
              (defvar arki/org-blocks-hidden t)

              (defun arki/org-toggle-blocks-and-image ()
                (interactive)
                (if arki/org-blocks-hidden
                    (org-show-block-all)
                  (org-hide-block-all))
                (setq-local arki/org-blocks-hidden (not arki/org-blocks-hidden))
                (org-toggle-inline-images))
              (arki/define-key "C-c t" 'arki/org-toggle-blocks-and-image 'org-mode-map)

              ))
  
  ;; Config org todos
  (with-eval-after-load 'org
    ;; Set keywords. Need to invoke org-mode-restart after set.
    (setq org-todo-keywords
          '((sequence "TODO(1!)" "READY(2!)" "DOING(3!)" "STUCK(4@)" "PAUSE(5!)" "|" "DONE(6!)")
            (sequence "|" "CANCELED(0@/!)")))
    ;; Insert "CLOSED: [timestamp]" when entering DONE states.
    (setq org-log-done 'time)
    ;; Keep the line when remove todo keywords
    (setq org-closed-keep-when-no-todo t)
    ;; Set todo keywords faces
    (setq org-todo-keyword-faces
          '(("READY" . "green") ("STUCK" . "red") ("PAUSE" . (:underline t))
            ("CANCELLED" . (:foreground "gray" :weigth bold))))
    ;; Tracking todo state changes
    (setq org-log-into-drawer "LOGBOOK")
    ;; Set priorities to A-E
    (setq org-priority-highest 65 org-priority-default 67 org-priority-lowest 69)
    )

  
  ;; Config org agenda
  (with-eval-after-load 'org
    (setq org-agenda-time-grid (quote ((daily today require-timed)
                                       (800
                                        1000
                                        1200
                                        1330
                                        1530
                                        1730
                                        1930
                                        2100)
                                       " ..."
                                       " - - - - - - - - - - - - - - - - - - - - - - - - - - -"
                                       )))
    )

  
  ;; Config org-capture


  (defgroup arki/org nil
    "Org mode config variables."
    :group 'arki/config)


  (defcustom arki/org-capture-file-default "~/org/capture.org"
    "The default file location for `org-capture'"
    :group 'arki/org)

  (defcustom arki/org-capture-file-thoughts "~/org/thoughts.org"
    "File location for `org-capture', usage: record thoughts."
    :group 'arki/org)

  (defcustom arki/org-capture-file-daily-work "~/org/daily-work.org"
    "File location for `org-capture', usage: record thoughts."
    :group 'arki/org)


  (defun init-org-capture ()
    "Init org capture config."

    (require 'org-capture)

    (setq org-default-notes-file arki/org-capture-file-default)

    (arki/define-key "a" 'org-agenda 'arki/prefix-keymap)
    (arki/define-key "c" 'org-capture 'arki/prefix-keymap)
    (add-to-list 'org-capture-templates
                 '("i" "Thoughts" entry (file+olp+datetree arki/org-capture-file-thoughts)
                   "* %U %^{heading}\n%?"))
    (add-to-list 'org-capture-templates
                 '("d" "Daily work." item (file+olp+datetree arki/org-capture-file-daily-work)
                   "%U %?"
                   :tree-type week))
    )


  (add-hook 'after-init-hook (lambda () (interactive) (init-org-capture)))

  
  ;; Config org image insertion
  (with-eval-after-load 'org

    ;; Config image view
    ;; (setq org-image-actual-width (/ (display-pixel-width) 6))
    (setq org-image-actual-width nil)
    ;; TODO How to display image link like: [[./img.png][image-describe]]
    (setq org-startup-with-inline-images t)

    (defun arki/org-insert-get-file-dir ()
      "Org mode中返回存放附件的目录，如果不存在会自动创建，目录名字为org文件路径加.file

  如果当前buffer没有指向一个文件，返回nil"
      (let* ((file-path (buffer-file-name)))
        (if file-path
            (let* ((cur-dir (file-name-directory file-path))
                   (dir-name (concat (file-name-nondirectory file-path) ".file"))
                   (dir-path (expand-file-name dir-name cur-dir)))
              (if (not (file-directory-p dir-path))
                  (make-directory dir-path t))
              dir-path)
          ;; (message "This buffer hasn't been saved. Can't decide target image path.")
          nil)))

    (defun arki/url-p (url-or-file)
      "Return nil if URL-OR-FILE is not an url."
      (member (url-type (url-generic-parse-url url-or-file)) (list "http" "https")))

    (defun arki/url-filename (url)
      (replace-regexp-in-string
       "%20" " "
       (file-name-nondirectory
        (car (url-path-and-query
              (url-generic-parse-url url))))))

    (defun arki/url-download (url target-file)
      "Download this URL to TARGET-FILE. Return nil if failed."
      (message "TODO: Failed to download %s" url)
      nil)


    (defun arki/copy-or-download-file (&optional file-or-url default-source-directory-symbol target-dir use-suggest-name)
      "Copy or download file from FILE-OR-URL into TARGET-DIR.

  If FILE-OR-URL is nil, will suggest from DEFAULT-SOURCE-DIRECTORY-SYMBOL.
  If TARGET-DIR is nil, will suggest from current location.
  If USE-SUGGEST-NAME is nil, will suggest to input new filename.

  Return the newfile path if succeed.
  Return nil if failed."
      (interactive)

      (let* ((origin-file (if file-or-url file-or-url
                            (ido-read-file-name "Select source file: " (symbol-value default-source-directory-symbol))))
             (origin-name (if (arki/url-p origin-file) (arki/url-filename origin-file) (file-name-nondirectory origin-file)))
             (target-dir (if target-dir target-dir
                           (ido-read-directory-name "Select target directory: "
                                                    (if buffer-file-name (file-name-directory buffer-file-name) nil))))
             (new-name (if use-suggest-name target-name
                         (concat (read-from-minibuffer "Rename file: " (file-name-base origin-name)) (file-name-extension origin-name t))))
             (target-file (expand-file-name new-name target-dir))
             (target-file-relative (concat (file-name-as-directory target-dir) new-name)))
        (make-directory target-dir t)

        (when (and default-source-directory-symbol
                   (not (arki/url-p origin-file)))
          (set default-source-directory-symbol (file-name-directory origin-file)))

        (let ((result-file (cond
                            ((arki/url-p origin-file)
                             (if (arki/url-download origin-file target-file)
                                 target-file-relative
                               nil))

                            ((and (file-exists-p origin-file)
                                  (not (file-directory-p origin-file)))
                             (copy-file origin-file target-file 1)
                             target-file-relative)

                            (t nil))))
          (unless result-file (if (arki/url-p origin-file)
                                  (message "Failed to download: %s --to-- %s" origin-file target-file)
                                (message "Failed to copy: %s --to-- %s" origin-file target-file)))
          result-file)))


    (setq arki/org-insert-image--previous-dir nil)
    (defun arki/org-insert-image ()
      "Insert image from local path or url."
      (interactive)
      (let* ((target-dir (arki/org-insert-get-file-dir))
             (target-file (arki/copy-or-download-file nil 'arki/org-insert-image--previous-dir target-dir nil)))
        (when target-file
          (let ((img-width (ido-completing-read "Image width in pixel: " (list "500" "origin" "300" "600") nil nil nil))
                (target-file-relative (concat (file-name-as-directory target-dir) (file-name-nondirectory target-file))))
            (if (equal img-width "origin")
                (insert (format "[[file:%s]]" target-file-relative))
              (insert (format "#+ATTR_ORG: :width %spx\n#+ATTR_HTML: :width %spx\n[[file:%s]]" img-width img-width target-file-relative))
              (org-display-inline-images t))))))


    (setq arki/org-insert-file--previous-dir nil)
    (defun arki/org-insert-file ()
      "Insert file from local path or url."
      (interactive)
      (let* ((target-dir (arki/org-insert-get-file-dir))
             (target-file (arki/copy-or-download-file nil 'arki/org-insert-file--previous-dir target-dir nil)))
        (when target-file
          (let ((target-file-relative (concat (file-name-as-directory target-dir) (file-name-nondirectory target-file))))
            (insert (format "[[file:%s][%s]]" target-file-relative (file-name-nondirectory target-file)))))))


    (defun arki/org-delete-file-link()
      "Delete the link at cursor, along with the associated file."
      (interactive)
      (let ((cur-file (buffer-file-name))
            (cur-element (org-element-context)))
        (if (and (equal (car cur-element) 'link)
                 (file-exists-p cur-file))
            (progn
              (let* ((f-path (org-element-property :path cur-element))
                     (f-path-abs (expand-file-name f-path (file-name-directory cur-file)))
                     (begin (org-element-property :begin cur-element))
                     (end (org-element-property :end cur-element)))
                (if (file-regular-p f-path-abs)
                    (when (yes-or-no-p (format "Delete file [%s] ?" f-path-abs))
                      (message "Deleting file: %s" f-path-abs)
                      (delete-file f-path-abs)
                      (message "File deleted: %s" f-path-abs)
                      (delete-region begin end))
                  (message "Failed to delete file link: It's not a regular file: %s" f-path-abs))))
          (message "Failed to delete file link: Not a link here or this buffer file not exists."))))


    (defun arki/org-insert-file-link()
      (interactive)

      (message "Insert link: Image(i) File(f)     |     Delete file and link: (k)")
      (set-transient-map
       (let ((map (make-sparse-keymap)))
         (define-key map (vector (list ?i))
           (lambda () (interactive) (arki/org-insert-image)))
         (define-key map (vector (list ?f))
           (lambda () (interactive) (arki/org-insert-file)))
         (define-key map (vector (list ?k))
           (lambda () (interactive) (arki/org-delete-file-link)))
         map)))

    (arki/define-key "C-c i" 'arki/org-insert-file-link 'org-mode-map)

    )




  
  (defun init-org-download ()
    ;; https://github.com/abo-abo/org-download
    (when (require-pack 'org-download)
      ;; Drag-and-drop to `dired`
      (add-hook 'dired-mode-hook 'org-download-enable)
      (setq org-download-image-org-width 500)
      (setq org-download-image-html-width 500)
      (setq org-download-screenshot-method "flameshot gui --raw > %s")

      (defun arki/org-download-method (url)
        (let* ((cur-dir (arki/org-insert-get-file-dir))
               (target-name (if (arki/url-p url)
                                (arki/url-filename url)
                              (file-name-nondirectory url)))
               ;; (target-name (ido-completing-read "Use filename: " (list target-name)))
               )
          (let* ((target-basename (file-name-base target-name))
                 (target-ext (file-name-extension target-name t))
                 (max-len 10))
            (when (length> target-basename max-len)
              (setq target-basename (substring target-basename 0 max-len)))
            (setq target-name (concat target-basename target-ext))
            )
          (setq target-name (concat (format-time-string "%Y%m%d_%H%M%S_") target-name))
          (expand-file-name target-name cur-dir)))

      (setq org-download-method 'arki/org-download-method)

      (setq org-download-annotate-function (lambda (url) ""))
      ;; (fboundp org-download-method)
      ;; (setq link "https://www.tornadoweb.org/en/stable/_images/tornado.png")

      ;; (let ((filename (funcall org-download-method link)))
      ;;   (org-download-insert-link link filename)
      ;;   )

      (setq org-download-method 'arki/org-download-method)
      )
    )
  (arki/add-hook-for-graphic-frame-init 'init-org-download t)

  ;; (setq org-agenda-files '("~/org"))
  
  ;; Config latex

  ;; Check whether latex exists
  ;; https://emacs.stackexchange.com/questions/332/how-can-i-find-the-path-to-an-executable-with-emacs-lisp
  (when (locate-file "latex" exec-path exec-suffixes 'executable)
    ;; Preview latex
    (defun init-org-latex-preview ()
      (org-latex-preview '(16))
      (setq-local org-preview-latex-image-directory (expand-file-name "ltximg/" arki/cache-dir)))
    (add-hook 'org-mode-hook 'init-org-latex-preview)

    ;; Config for latex formular
    (when (require-pack 'auctex t)
      (when (require-pack 'cdlatex)
        (add-hook 'org-mode-hook 'turn-on-org-cdlatex)))
    )

  
  (require-pack 'org-ref)

  
  (when (require-pack 'org-roam)
    (setq org-roam-directory (file-truename "~/Documents/org-roam/default/files"))
    (make-directory org-roam-directory t)
    (setq org-roam-db-location (file-truename "~/Documents/org-roam/default/org-roam.db"))
    (unless (file-directory-p org-roam-directory)
      (make-directory org-roam-directory))
    (org-roam-db-autosync-mode)

    (arki/define-key "C-c g" 'org-roam-node-insert)
    (arki/define-key "C-c h" 'org-roam-node-find)

    ;; https://github.com/org-roam/org-roam-ui
    (when (require-pack 'org-roam-ui)
      (setq org-roam-ui-sync-theme t
            org-roam-ui-follow t
            org-roam-ui-update-on-save t
            org-roam-ui-open-on-start nil)
      ;; Start org-roam-ui, the default address: http://localhost:35901/
      (unless (default-value 'org-roam-ui-mode)
        (org-roam-ui-mode 1)
        (message "org-roam-ui started, visit at  http://localhost:35901/")
        )
      ;; Stop org-roam-ui when stop emacs.
      (defun arki/org-roam-ui-stop (&rest _args)
        (message "Stop org-roam-ui.")
        (when org-roam-ui-mode (org-roam-ui-mode -1)))
      (advice-add #'save-buffers-kill-terminal :before #'arki/org-roam-ui-stop)
      (add-hook 'arki/desktop-load-before-hook 'arki/org-roam-ui-stop)
      )
    )
  
  ;; Config org-web-tools
  (when (require-pack 'org-web-tools))
  
#+end_src

** project-tools
#+begin_src emacs-lisp
  ;; --------------------------------------------------PROJECT UTILS--------------------------------------------------
  (when (require-pack 'magit)
    ;; 配置magit
    (arki/define-key "g" 'magit-status 'arki/prefix-keymap)
    (defun arki/push-current-branch-to-all-remotes ()
      (interactive)
      (let* ((cur-branch (magit-get-current-branch))
             ;; Avoid pushing to different remote branches.
             ;; Or ensure pushing to the remote branch with the same name, create it if not exist.
             ;; (remote-names (magit-list-remote-branch-names))
             (remote-names (mapcar (lambda (it) (concat it "/" cur-branch)) (magit-list-remotes)))
             ;; https://emacs.stackexchange.com/questions/9323/get-git-repo-root-directory-preferably-with-magit#comment13808_9324
             (repo-path (magit-toplevel)) ; Or (vc-root-dir)
             (success-push '())
             (failed-push '()))
        (if (not repo-path)
            (message "Nothing to do. This is not a git repo.")
          (when (yes-or-no-p (format "Repo %s: Push %s to %s?" repo-path cur-branch remote-names))
            (dolist (remote-name remote-names)
              (condition-case err (progn
                                    (message "Repo %s: Pushing %s to %s" repo-path cur-branch remote-name)
                                    (magit-git-push cur-branch remote-name nil)
                                    (setq success-push (append success-push (list remote-name)))
                                    )
                (error
                 (message "Failed to push %s to %s, due to ERROR: %S" cur-branch remote-name err)
                 (setq failed-push (append failed-push (list remote-name))))
                ))
            (message "Repo %s: Push %s invoked. Success: %s Failed: %s. Wait magit to finish it." repo-path cur-branch success-push failed-push)
            )
          )))

    (arki/define-key "H" 'arki/push-current-branch-to-all-remotes 'magit-status-mode-map)
    )


  ;; https://github.com/Alexander-Miller/treemacs
  (when (require-pack 'treemacs)
    ;; Let treemacs become invisible to commands like ‘other-window’ or ‘evil-window-left’.
    (setq treemacs-is-never-other-window nil)
    ;; 打开treemmacs导航
    (arki/define-key "C-<f2>" 'treemacs-select-window)
    (arki/define-key "<f2>" 'treemacs)
    )

  (when (require-pack 'projectile)
    (projectile-mode +1)
    (arki/define-key "C-c p" 'projectile-command-map 'projectile-mode-map))

  (when (require-packs 'treemacs 'projectile)
    (require-pack 'treemacs-projectile))
#+end_src

** filetypes-support
*** markdown                                                     :manually:
使用[[https://github.com/jrblevin/markdown-mode][markdown-mode]],需要安装[[https://pandoc.org/][pandoc]]。
#+begin_src emacs-lisp
  ;; Markdown
  ;; https://github.com/jrblevin/markdown-mode
  (when (require-pack 'markdown-mode)
    ;; 配置markdown-mode
    ;; 调用markdown-live-preview报错markdown failed with exit code 1解决方案：(参考自https://emacs-china.org/t/markdown/11399)
    ;; 安装pandoc，配置markdown-command指向pandoc。下载地址：https://pandoc.org/
    (add-hook 'markdown-mode-hook
              (lambda () (setq markdown-command "pandoc")
                ;; M-p 与跳转 ace window 冲突了，禁用掉
                (arki/define-key "M-p" nil 'markdown-mode-map))
              )
    )
#+end_src

*** csv
#+begin_src emacs-lisp
  (require-pack 'csv-mode)
#+end_src

*** json
#+begin_src emacs-lisp
  ;; https://github.com/gongo/json-reformat
  (require-pack 'json-reformat)
#+end_src

*** yaml
#+begin_src emacs-lisp
  (require-pack 'yaml)
#+end_src

*** equb
#+begin_src emacs-lisp
  (when (require-pack 'nov)
    (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
    )
#+end_src

*** very large files
#+begin_src emacs-lisp
  ;; https://github.com/m00natic/vlfi
  (when (require-pack 'vlf)
    (custom-set-variables '(large-file-warning-threshold 20971520)
                          '(vlf-batch-size 1048576) ; in bytes 1MB
                          '(vlf-tune-step 1048576)
                          '(vlf-tune-enabled nil))
    (require 'vlf-setup))
#+end_src

** input-method
使用[[https://github.com/tumashu/pyim][pyim]]，词库文件格式要与这个框架要求的一致。放在 ~.emacs.d/arki.cache/ciku~ 下面，会自动扫描加载以
~.pyim~ 结尾的文件。

#+begin_src emacs-lisp
  (defgroup arki/input-method nil
    "Input method config, only for read."
    :group 'arki/config)


  (defcustom arki/input-method-ciku (expand-file-name "ciku" arki/cache-dir) "Ciku directory for pyim." :group 'arki/input-method)

  (setq arki/ziranma-scheme '(arki/ziranma-shuangpin
                              :document "自然码双拼方案。"
                              :class shuangpin
                              :first-chars "abcdefghijklmnopqrstuvwxyz"
                              :rest-chars "abcdefghijklmnopqrstuvwxyz"
                              :prefer-trigger-chars nil
                              :keymaps
                              (("a" "a" "a")
                               ("b" "b" "ou")
                               ("c" "c" "iao")
                               ("d" "d" "uang" "iang")
                               ("e" "e" "e")
                               ("f" "f" "en")
                               ("g" "g" "eng")
                               ("h" "h" "ang")
                               ("i" "ch" "i")
                               ("j" "j" "an")
                               ("k" "k" "ao")
                               ("l" "l" "ai")
                               ("m" "m" "ian")
                               ("n" "n" "in")
                               ("o" "o" "uo" "o")
                               ("p" "p" "un")
                               ("q" "q" "iu")
                               ("r" "r" "uan" "er")
                               ("s" "s" "iong" "ong")
                               ("t" "t" "ue" "ve")
                               ("u" "sh" "u")
                               ("v" "zh" "v" "ui")
                               ("w" "w" "ia" "ua")
                               ("x" "x" "ie")
                               ("y" "y" "uai" "ing")
                               ("z" "z" "ei")
                               ("aa" "a")
                               ("an" "an")
                               ("ai" "ai")
                               ("ao" "ao")
                               ("ah" "ang")
                               ("ee" "e")
                               ("ei" "ei")
                               ("en" "en")
                               ("er" "er")
                               ("eg" "eng")
                               ("oo" "o")
                               ("ou" "ou"))))

  ;; https://github.com/tumashu/pyim
  (when (require-pack 'pyim)
    ;; (require 'pyim-basedict) ; 拼音词库设置，五笔用户 *不需要* 此行设置
    ;; (pyim-basedict-enable)   ; 拼音词库，五笔用户 *不需要* 此行设置
    (setq default-input-method "pyim")
    (pyim-scheme-add arki/ziranma-scheme)
    (setq pyim-enable-shortcode nil)
    (setq pyim-default-scheme 'arki/ziranma-shuangpin)
    (setq pyim-page-length 9)
    ;; 设置显示候选词的框是什么形式的
    (if (memq window-system '(x win32 ns))
        (when (require-pack 'posframe)
          (setq pyim-page-tooltip 'posframe))
      (setq pyim-page-tooltip 'popup)
      )

    (setq-default pyim-english-input-switch-functions
                  '(pyim-probe-dynamic-english
                    pyim-probe-auto-english))
    ;; https://github.com/tumashu/pyim/issues/397
    ;; pyim-convert-code-at-point 已废弃
    (arki/define-key "M-i" 'pyim-convert-string-at-point)

    (defun arki/input-method--get-ciku-files ()
      "Get pyim ciku files from directory `arki/input-method-ciku'`"
      (interactive)
      (when (file-exists-p arki/input-method-ciku)
        (directory-files-recursively arki/input-method-ciku ".pyim$")))

    (dolist (cur-file (arki/input-method--get-ciku-files))
      (add-to-list 'pyim-dicts (list :name (file-name-base cur-file) :file cur-file)))

    (setq pyim-fuzzy-pinyin-alist nil)
    )
#+end_src

** ibuffer with version control view
#+begin_src emacs-lisp
  ;;; init-ibuffer.el --- ibuffer settings -*- lexical-binding: t -*-
  ;;; Commentary:
  ;; Learn from: https://github.com/purcell/emacs.d/blob/master/lisp/init-ibuffer.el

  (when (require-pack 'ibuffer-vc)
    (defun ibuffer-set-up-preferred-filters ()
      (ibuffer-vc-set-filter-groups-by-vc-root)
      (unless (eq ibuffer-sorting-mode 'filename/process)
        (ibuffer-do-sort-by-filename/process)))
    (add-hook 'ibuffer-hook 'ibuffer-set-up-preferred-filters)
    (setq ibuffer-formats
          '((mark "(" modified vc-status-mini "|" read-only locked ") "
                  (size-h 10 -1 :right)
                  "   "
                  (name 36 36 :left :elide)
                  "   "
                  (mode 36 36 :left :elide)
                  "   "
                  vc-relative-file)
            (mark "(" modified vc-status-mini "|" read-only locked ") "
                  (size-h 10 -1 :right)
                  "   "
                  (name 36 -1 :left)
                  "   "
                  (mode 36 -1 :left)
                  "   "
                  (vc-status 15 15 :left)
                  "   "
                  vc-relative-file)))
    )
#+end_src

** layout
#+begin_src emacs-lisp
  ;; --------------------------------------------------WINDOW MANAGER--------------------------------------------------
  (when (require-pack 'ace-window)
    ;; 配置ace-windown
    (arki/define-key "M-p" 'ace-window)
    )

  (require-pack 'transpose-frame)

  ;; 启用winner mode
  (winner-mode 1)


  ;; 执行完命令后，直接使用C-g关闭辅助性的buffer
  (when (require-pack 'popwin)
    ;; 配置popwin
    (popwin-mode 1)
    )


  ;; ;; https://github.com/nex3/perspective-el#buffer-switchers
  ;; (when (require-pack 'perspective)
  ;;   (persp-mode)
  ;;   (when (require 'bs)
  ;;     (arki/define-key "C-x C-b" (lambda (arg) (interactive "P")
  ;;                                  (if (fboundp 'persp-ibuffer)
  ;;                                      (persp-ibuffer arg)
  ;;                                    (ibuffer)))))
  ;;   (setq persp-state-default-file (expand-file-name "perspective.save" arki/cache-dir))
  ;;   (add-hook 'kill-emacs-hook (lambda () (interactive "P")
  ;;                                ;; Kill gpg buffers before save persp, to avoid password input when restart emacs.
  ;;                                (kill-matching-buffers ".*\\.gpg$" nil t)
  ;;                                (persp-state-save persp-state-default-file)))
  ;;   (add-hook 'emacs-startup-hook (lambda () (interactive "P") (persp-state-load persp-state-default-file)))
  ;;   )

  ;; https://github.com/bmag/emacs-purpose
  ;; Config M-x customize-group purpose
  ;; (add-to-list 'purpose-user-mode-purposes '(<major-mode> . <purpose>))
  ;; (add-to-list 'purpose-user-name-purposes '(<name> . <purpose>))
  ;; (add-to-list 'purpose-user-regexp-purposes '(<pattern> . <purpose>))
  ;; (setq purpose-use-default-configuration t) ; not really necessary, default is t
  ;; (purpose-compile-user-configuration) ; activates your changes
  ;; (when (require-pack 'window-purpose)
  ;; (purpose-mode))
#+end_src

** help-info
#+begin_src emacs-lisp
  (when (require-pack-local 'info+)
    (setq Info-fontify-glossary-words nil)
    )
#+end_src

** dictionary
#+begin_src emacs-lisp
  ;; https://github.com.cnpmjs.org/xuchunyang/youdao-dictionary.el
  (when (require-pack 'youdao-dictionary)

    (defun youdao-dictionary-search-from-region-or-input (arg)
      "With C-u, search from input. Else: search at point or region."
      (interactive "p")
      (cond ((= arg 4) (call-interactively 'youdao-dictionary-search-from-input))
            (t (call-interactively 'youdao-dictionary-search-at-point))))

    (arki/define-key "d" 'youdao-dictionary-search-from-region-or-input 'arki/prefix-keymap)
    (setq youdao-dictionary-search-history-file (expand-file-name ".youdao-history" arki/cache-dir))

    ;; Integrate with popwin-el (https://github.com/m2ym/popwin-el)
    (when (require-pack 'popwin) (push "*Youdao Dictionary*" popwin:special-display-config))

    (require-pack-local 'shengci t "https://raw.githubusercontent.com/EvanMeek/shengci.el/master/shengci.el")
    )
#+end_src

** python
:PROPERTIES:
:header-args: :tangle no
:END:

#+begin_src emacs-lisp
  (defgroup arki/python nil
    "Python config."
    :group 'arki/config)


  (defcustom arki/lsp-pyls-server-command nil
    "Python language server location.

  May be here: {CONDA_HOME}/Scripts/pyls {PYTHON_ENV_HOME}/bin/pyls
  "
    :group 'arki/python)

  
  ;; Config lsp.
  ;; https://github.com/emacs-lsp/lsp-mode
  (setq arki/lsp--ready? nil)
  ;; Set key prefix should come before require pack.
  (setq lsp-keymap-prefix "C-c l")
  (when (require-pack 'lsp-mode)
    (add-hook 'lsp-mode-hook 'lsp-enable-which-key-integration)
    ;; https://github.com/emacs-lsp/dap-mode
    (require-pack 'dap-mode)

    ;; https://github.com/emacs-lsp/lsp-ui
    (require-pack 'lsp-ui)

    ;; https://github.com/emacs-lsp/lsp-treemacs
    (require-pack 'lsp-treemacs)

    (setq arki/lsp--ready? t)
    )

  
  ;; Config python env

  ;; https://github.com/necaris/conda.el
  (setq arki/python--conda-home-ready? nil)
  (when (require-pack 'conda)

    (conda-env-initialize-interactive-shells)
    (conda-env-initialize-eshell)

    (defun arki/python--prepare-conda-env ()
      "Set conda home. And switch to base env if conda-project-env-path is not provided."
      (let* ((conda-path (executable-find "conda")))
        (if conda-path
            (if (and (string-prefix-p conda-anaconda-home conda-path) (string-match-p "conda" conda-anaconda-home))
                ;; Here: conda command resides in conda-anaconda-home, and conda-anaconda-home contains "codna"
                ;; Activate conda env
                (progn (setq arki/python--conda-home-ready? t)
                       ;; `conda-project-env-path` can be set by a buffer-local or project-local variable (e.g. a `.dir-locals.el` that defines `conda-project-env-path`),
                       ;; or inferred from an `environment.yml` or similar at the project level."
                       (if (bound-and-true-p conda-project-env-path)
                           ;; If already activated, no need to re-activate.
                           (if (equal conda-env-current-path (conda-env-name-to-dir conda-project-env-path))
                               (message "Conda env has already been [%s]" conda-env-current-name)
                             (message "Got conda env info, activate it now: [%s]" conda-project-env-path)
                             (conda-env-activate conda-project-env-path))
                         ;; Cannot get env info, select an env.
                         (conda-env-activate))
                       ;; Verify python executable is in current conda env.
                       (if (string-prefix-p conda-env-current-path  (executable-find "python")) t
                         (message "Current conda env broken: [%s] Python executable not found here!" conda-env-current-path)
                         nil))
              ;; Here: conda home is not ok, config it now:
              (let* ((prompt-message (format "Conda home [%s] is not valid, while conda is [%s]. Now select conda home: " conda-anaconda-home conda-path))
                     (conda-home (ido-read-directory-name prompt-message (arki/directory-parent conda-path 2))))
                (customize-save-variable 'conda-anaconda-home conda-home)
                (customize-save-variable 'conda-env-home-directory conda-home)
                (arki/python--prepare-conda-env))
              )
          (message "Warning: Conda executable is not available. Stop setting conda related things.")
          nil
          )))

    (defun arki/python--adjust-conda-env-and-lsp-mode ()
      "The logic:

  1. If conda env is not activated as desired: Activate the desired one, and link to lsp server if needed.
  As desired means:
  Local variable conda-project-env-path is consistent with conda-env-current-path,
  or, conda-project-env-path is not set.

  2. If conda env changed: And lsp is not running: Just start it.
                           And lsp is running: restart lsp.
  "
      (when (equal major-mode 'python-mode)

        (if (or (not (bound-and-true-p conda-project-env-path)) ; Local env not set
                ;; Local env set the same with current env.
                (and (bound-and-true-p conda-project-env-path)
                     (equal conda-env-current-path (conda-env-name-to-dir conda-project-env-path))))
            ;; Conda env is activated and lsp mode it not on: turn on lsp mode.
            (when (and (bound-and-true-p conda-env-current-path)
                       (not (bound-and-true-p lsp-mode)))
              (lsp))

          ;; Local env is set and not the same with current activated env.
          (conda-env-activate conda-project-env-path)
          (when (string-match-p "Connected to" (format "%S" (lsp)))
            (call-interactively 'lsp-workspace-restart)))))

    (defun arki/python--adjust-conda-env-and-lsp-mode-advice (&rest args)
      (arki/python--adjust-conda-env-and-lsp-mode))

    (setq arki/python--lsp-ready? nil)
    (defun arki/python--prepare-lsp ()
      "Prepare python language server. Can only be executed successfully once."
      (when (and (not arki/python--lsp-ready?) ; Can only be executed successfully once.
                 arki/lsp--ready?             ; Can only be invoked when lsp is ready.
                 (arki/python--prepare-conda-env)) ; Can only be invoked when conda env is ready.
        ;; https://github.com/emacs-lsp/lsp-pyright
        (when (require-pack 'lsp-pyright)
          ;; (setq lsp-pyright-python-executable-cmd (expand-file-name "bin/python" (conda-env-name-to-dir "base")))
          (setq lsp-pyright-python-executable-cmd "python")
          (advice-add 'switch-to-buffer :after #'arki/python--adjust-conda-env-and-lsp-mode-advice)
          (setq arki/python--lsp-ready? t))))


    (defun arki/python-lsp-config ()
      "Init python lsp config."
      (interactive)
      (arki/python--prepare-lsp)
      (arki/python--adjust-conda-env-and-lsp-mode))


    (arki/define-key "p" 'arki/python-lsp-config 'arki/prefix-keymap)
    )
#+end_src

** wsl
#+begin_src emacs-lisp
  (defgroup arki/wsl nil
    "Input method config, only for read."
    :group 'arki/config)


  (defcustom arki/wsl-p nil "Flag to indicate whether I'm in wsl." :group 'arki/wsl)

  (defun arki/wsl-setup()
    "Setup functions only useful for interacting with wsl."

    (defun arki/wsl-path-win2linux (win-path)
      "Transform windows path to linux path inside wsl."

      (when (and arki/wsl-p
                 (string-match "^[a-zA-Z]:[\\\\/]" win-path))
        (let* ((disk (downcase (substring win-path 0 1)))
               (final-path (replace-regexp-in-string "^[a-zA-Z]:[\\\\/]*" "" win-path))
               )
          (setq final-path (replace-regexp-in-string "\\\\+" "/" final-path))
          (setq final-path (concat "/mnt/" disk "/" final-path)))))


    (defun arki/wsl-copy-file-win2linux (win-path target-linux-path)
      "Copy file from windows to specified linux path inside wsl."
      (let* ((wsl-path (arki/wsl-path-win2linux win-path)))
        (when wsl-path
          (copy-file wsl-path target-linux-path 1)
          t)))

    (defun arki/wsl-open-in-win ()
      "Open file in wsl by windows"
      (interactive)
      (when arki/wsl-p
        (let* ((file (ido-read-file-name "File to open in win: "))
               ;; Refer to: https://www.reddit.com/r/bashonubuntuonwindows/comments/8teo9i/is_there_a_way_to_open_a_file_in_a_browser_from/
               (command (format "explorer.exe $(wslpath -w $(realpath %s))" file)))
          (message "Execute command: %S" command)
          (shell-command command))))
    )

  (add-hook 'after-init-hook 'arki/wsl-setup)
#+end_src

** eaf
#+begin_src emacs-lisp
  (defun arki/eaf-enable ()
    (interactive)

    ;; https://github.com/manateelazycat/emacs-application-framework
    ;; Step1: Download eaf repo.
    ;; git clone --depth=1 -b master https://github.com/manateelazycat/emacs-application-framework.git ~/.emacs.d/site-lisp/emacs-application-framework/

    ;; Step2: Install system dependencies. Load eaf first then invoke this command.
    ;; M-x eaf-install-dependencies

    ;; Step3: Install el dependencies.
    ;; https://github.com/kiwanami/emacs-ctable
    (require-pack 'ctable)
    ;; https://github.com/kiwanami/emacs-deferred
    (require-pack 'deferred)
    ;; https://github.com/kiwanami/emacs-epc
    (require-pack 'epc)
    ;; https://github.com/magnars/s.el
    (require-pack 's)

    ;; Step4: Enable eaf
    (add-to-list 'load-path "~/.emacs.d/site-lisp/emacs-application-framework/")
    (require 'eaf)

    ;; Then all active EAF Browser buffers will be noted down before
    ;; Emacs is killed, and will be opened again when calling M-x
    ;; eaf-browser-restore-buffers in a future Emacs session.
    (setq eaf-browser-continue-where-left-off t)

    (setq eaf-browser-default-search-engine "duckduckgo")
    (eaf-setq eaf-browse-blank-page-url "https://duckduckgo.com")

    ;; There are certain variables will be shared across Emacs Lisp and Python.
    ;; You can easily configure then with the function eaf-setq.
    ;; Check the full list of configurable variables with C-h v eaf-var-list
    )
  (arki/define-key "e" 'arki/eaf-enable 'arki/prefix-keymap)
#+end_src

* Key macros
:PROPERTIES:
:header-args: :tangle yes :comments link
:END:
** Doc
1. [[info:emacs#Save Keyboard Macro][Naming and Saving Keyboard Macros]]
2. [[info:emacs#Regexps][Syntax of Regular Expressions]]
** Indent code in the next source sturcture from current point.
#+begin_src emacs-lisp
  (fset 'arki/kmacro-format-source-block-elisp
        (kmacro-lambda-form [?\M-x ?i ?s ?e ?a ?r ?c ?h ?- ?f ?o ?r ?w ?a ?r ?d return ?^ ?# ?\\ ?+ ?b ?e ?g ?i ?n ?_ ?s ?r ?c ?  ?e ?m ?a ?c ?s ?- ?l ?i ?s ?p return ?\C-c ?\' ?\C-\M-\\ ?\M-x ?c ?l ?e ?a backspace backspace backspace backspace ?w ?h ?i ?t ?e ?s ?p ?a ?c ?e ?- ?c ?l ?e ?a ?n ?u ?p return ?\C-\M-\\ ?\C-c ?\'] 0 "%d"))
  (arki/define-key "C-x C-k 1" 'arki/kmacro-format-source-block-elisp)
#+end_src

* Need review
:PROPERTIES:
:header-args: :tangle no
:END:
** Desktop save
#+begin_src emacs-lisp
  (arki/desktop-save "test")

  (arki/desktop-save desktop-dirname)

  (desktop-read desktop-dirname)

  t
  (pp-to-string desktop-files-not-to-save)
  "\"\\\\(\\\\`/[^/:]*:\\\\|(ftp)\\\\'\\\\)\""



  (pp-to-string frameset-filter-alist)
  "((treemacs-workspace . :never)
   (treemacs-id . :never)
   (tabs . frameset-filter-tabs)
   (background-color . frameset-filter-sanitize-color)
   (buffer-list . :never)
   (buffer-predicate . :never)
   (buried-buffer-list . :never)
   (client . :never)
   (delete-before . :never)
   (font . frameset-filter-font-param)
   (font-backend . :never)
   (foreground-color . frameset-filter-sanitize-color)
   (frameset--text-pixel-height . :save)
   (frameset--text-pixel-width . :save)
   (fullscreen . frameset-filter-shelve-param)
   (GUI:font . frameset-filter-unshelve-param)
   (GUI:fullscreen . frameset-filter-unshelve-param)
   (GUI:height . frameset-filter-unshelve-param)
   (GUI:width . frameset-filter-unshelve-param)
   (height . frameset-filter-shelve-param)
   (outer-window-id . :never)
   (parent-frame . :never)
   (parent-id . :never)
   (mouse-wheel-frame . :never)
   (tty . frameset-filter-tty-to-GUI)
   (tty-type . frameset-filter-tty-to-GUI)
   (width . frameset-filter-shelve-param)
   (window-id . :never)
   (window-system . :never)
   (name . :never)
   (left . frameset-filter-iconified)
   (minibuffer . frameset-filter-minibuffer)
   (top . frameset-filter-iconified))
  "


  desktop-restore-eager
  t

  desktop-globals-to-clear
  (kill-ring kill-ring-yank-pointer search-ring search-ring-yank-pointer regexp-search-ring regexp-search-ring-yank-pointer)

  desktop-globals-to-save
  (desktop-missing-file-warning tags-file-name tags-table-list search-ring regexp-search-ring register-alist file-name-history)

  desktop-clear-preserve-buffers
  ("\\*scratch\\*" "\\*Messages\\*" "\\*server\\*" "\\*tramp/.+\\*" "\\*Warnings\\*")

  desktop-auto-save-timeout
  30

  desktop-auto-save-timer
  nil

  desktop-load-locked-desktop
  ask

  (desktop-read)

  desktop-save-mode
  nil

  desktop-path
  ("~/.emacs.d/" "~")
  desktop-base-file-name
  ".emacs.desktop"
  desktop-base-lock-name
  ".emacs.desktop.lock"
  (setq desktop-base-file-name "emacs")
  )

  (desktop-change-dir)

  (desktop-save)
  (desktop-save-in-desktop-dir)



  (setq desktop-path (list (expand-file-name "desktops" arki/cache-dir)))
  (setq desktop-dirname (car desktop-path))
  (expand-file-name desktop-dirname)
  "/home/k/.emacs.d/arki.cache/desktops"
  (setq desktop-name "emacs")
#+end_src

Save tmp files:
#+begin_src emacs-lisp
  ;; (arki/desktop-tmpfiles-revert "emacs" t)
  ;; (arki/desktop-tmpfiles-save arki/desktop-current-desktop)
#+end_src

** Resize window
#+begin_src emacs-lisp
  (when (require-pack 'windsize)
    (windsize-default-keybindings))

  ;; This is very useful
  (require-pack 'windresize)

  (progn (windmove-left windresize-windmove-relative-to-point)
         (adjust-window-trailing-edge (selected-window) (- i) t))

  (adjust-window-trailing-edge nil 2 t)

  (setq arki/t (windmove-left))
  arki/t




  (condition-case err (windmove-left)
    (error
     (message "ERROR: %s" (error-message-string err))))


  (select-window (selected-window))
  (windmove-find-other-window 'left)
  (equal 'abc 'abc)
#+end_src

Tested code.
#+begin_src emacs-lisp :tangle no
#+end_src

** Org-roam
#+begin_src emacs-lisp
  (when (require-pack 'org-roam)
    (setq org-roam-directory (file-truename "~/Documents/org-roam"))
    (unless (file-directory-p org-roam-directory)
      (make-directory org-roam-directory))
    (org-roam-db-autosync-mode)

    ;; https://github.com/org-roam/org-roam-ui
    (require-pack 'org-roam-ui)
    )
#+end_src

** Org-protocol-capture-html
#+begin_src emacs-lisp
  (server-start)
  (require 'org-protocol)
  (require-pack 's)
  (require-pack-local 'org-protocol-capture-html t "https://raw.githubusercontent.com/alphapapa/org-protocol-capture-html/master/org-protocol-capture-html.el" )
  ;; (add-to-list 'org-capture-templates
  ;;              '("i" "Thoughts" entry (file+olp+datetree arki/org-capture-file-thoughts)
  ;;                "* %U %^{heading}\n%?"))
  (add-to-list 'org-capture-templates
               '("w" "Web site" entry
                 (file "")
                 "* %a :website:\n\n%U %?\n\n%:initial"))
#+end_src

** Completing
#+begin_src emacs-lisp
  ;; Persist history over Emacs restarts
  ((setq )avehist-mode)


  ;; https://github.com/oantolin/orderless
  (when (require-pack 'orderless)
    (setq completion-styles '(orderless basic)
          completion-category-overrides '((file (styles basic partial-completion)))))

  ;; https://github.com/radian-software/selectrum
  (when (require-pack 'selectrum)
    (selectrum-mode +1)
    (when (require-pack 'orderless)
      (setq completion-styles '(orderless basic)
            completion-category-overrides '((file (styles basic partial-completion))))
      ;; Optional performance optimization
      ;; by highlighting only the visible candidates.
      (setq orderless-skip-highlighting (lambda () selectrum-is-active))
      (setq selectrum-highlight-candidates-function #'orderless-highlight-matches))
    )


  ;; https://github.com/minad/vertico
  (when (require-pack 'vertico)
    (vertico-mode)

    ;; Different scroll margin
    (setq vertico-scroll-margin 100)

    ;; Show more candidates
    (setq vertico-count 10)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    (when (require-pack 'orderless)
      (setq completion-styles '(orderless basic)
            completion-category-defaults nil
            completion-category-overrides '((file (styles partial-completion)))))
    )


  (when (require-pack 'counsel)
    ;; 配置counsel
    (arki/define-key "M-x" 'counsel-M-x)
    ;; (arki/define-key "C-x C-f" 'counsel-find-file)
    ;; (arki/define-key "C-h f" 'counsel-describe-function)
    ;; (arki/define-key "C-h v" 'counsel-describe-variable)
    ;; (arki/define-key "C-c p f" 'counsel-git) ;;查找当前所在git仓库管理的文件
    )
#+end_src

* Load custom variables
:PROPERTIES:
:header-args: :tangle yes :comments link
:END:

#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))

  (when (file-exists-p custom-file)
    (load custom-file))

  (message "My init file ends here!")
#+end_src

* Questions
** eval-after-load vs mode-hook
https://stackoverflow.com/questions/2736087/eval-after-load-vs-mode-hook
https://stackoverflow.com/questions/21880139/what-is-with-eval-after-load-in-emacs-lisp/21880276

** How to set customize variables?
1. [[https://emacs.stackexchange.com/questions/32157/should-custom-variables-defined-without-defcustom-be-set-via-custom-set-variab][The question]]: ~customize-set-variable~ vs ~customize-set-value~

   - Variable set by ~customize-set-variable~ will be saved to custom file, when ~customize-save-variable~
     or ~customize-save-variables~ is invoked.
   - While, variable set by ~customize-set-value~ will not be saved to custom file.
   - They can both set comment.

2. From help-gnu-emacs:

   [[https://lists.gnu.org/archive/html/help-gnu-emacs/2015-11/msg00360.html][which one to use: custom-set-variables, customize-set-variable, or customize-set-value?]]

   1. The `customize-*' functions are also commands.  And they set only a single variable (option).
      `custom-set-variables' is not a command, and it can set any number of options - it is what
      Customize writes to your `custom-file' (or init file).

   2. `customize-set-value' does not use the defcustom's :set function, and it does not set the
      default value.  It just sets the current value in the current buffer.  It is like setq, except
      that it can be used interactively (it is a command), and in that case it reads the value
      according to how such values are read interactively.  AFAIK, it respects the defcustom :type
      (but it does not respect :set).

   3. I agree that the doc is not very clear.  Recently I forgot that `customize-set-value' does not
      use the defcustom's :set function, and I was bitten by the fact that it does not.  It seems
      odd that it has two, completely independent differences from `customize-set-variable'.


*** TODO Need to write a function to set custom variable with the default comment
:LOGBOOK:
- State "TODO"       from              [2021-11-03 Wed 14:30]
:END:
The default comment could be: /Initialized in init file with default value: xx/.

** How to show diffs for gpg-encrypted files?
See [[https://magit.vc/manual/magit/How-to-show-diffs-for-gpg_002dencrypted-files_003f.html][here]].
Git supports showing diffs for encrypted files, but has to be told to do so. Since Magit just uses
Git to get the diffs, configuring Git also affects the diffs displayed inside Magit:
#+begin_example
  git config --global diff.gpg.textconv "gpg --no-tty --decrypt"
  echo "*.gpg filter=gpg diff=gpg" > .gitattributes
#+end_example
